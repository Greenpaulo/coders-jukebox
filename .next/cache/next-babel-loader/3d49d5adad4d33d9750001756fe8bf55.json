{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport ContextProvider from '../context/ContextProvider';\nimport Layout from '../components/Layout';\nimport { useState, useEffect } from 'react';\nimport Router from 'next/router';\nimport cookie from 'react-cookies';\nimport axios from 'axios'; // import { empty } from 'apollo-boost';\n\nimport { AnimatePresence } from 'framer-motion';\nimport keys from '../config/keys';\n\nconst App = ({\n  Component,\n  pageProps,\n  router\n}) => {\n  // const port = parseInt(process.env.PORT, 10) || 3000;\n  // Determine the URI based on dev or prod\n  // const URI = process.env.NODE_ENV === 'production' ?\n  // 'http://code-tunes.herokuapp.com' :\n  //  `http://localhost:${port}`;\n  let token = null;\n  useEffect(() => {\n    //Get all users - for the searchbar user search\n    getAllUsers(); // Check for token in local storage once the component mounts - i.e. code is now run in the browser (instead of on the server)\n\n    token = localStorage.getItem('token');\n\n    if (token) {\n      setAuthState(_objectSpread(_objectSpread({}, authState), {}, {\n        authenticated: true,\n        token: token\n      })); // Get the logged in user's data\n\n      getUserDataByToken(token);\n    }\n  }, []);\n  const emptyUser = {\n    id: '',\n    firstName: '',\n    lastName: '',\n    jobTitle: '',\n    location: '',\n    languages: [],\n    about: '',\n    ownedVideos: [],\n    userComments: [],\n    playlistComments: [],\n    favourites: [],\n    profilePhotoFilename: ''\n  }; // State\n\n  const {\n    0: authState,\n    1: setAuthState\n  } = useState({\n    authenticated: false,\n    userId: null,\n    token: null,\n    tokenExpiration: null\n  }); // Logged in User's Data\n\n  const {\n    0: currentUser,\n    1: setCurrentUser\n  } = useState(emptyUser); // Current profiles user data\n\n  const {\n    0: profileUser,\n    1: setProfileUser\n  } = useState(emptyUser); // const [profilePhoto, setProfilePhoto] = useState(null);\n\n  const {\n    0: videoState,\n    1: setVideoState\n  } = useState({\n    title: '',\n    // description:'',\n    videoId: ''\n  });\n  const {\n    0: commentState,\n    1: setCommentState\n  } = useState({\n    comment: null\n  });\n  const {\n    0: allUsers,\n    1: setAllUsers\n  } = useState([]);\n  const {\n    0: autoplay,\n    1: setAutoplay\n  } = useState(false); // AUTHENTICATION *******************************************************************\n  // Login a user\n\n  const login = async (email, password) => {\n    // Make a API query to get a token\n    const requestBody = {\n      query: `\n        query {\n          login(email: \"${email}\", password: \"${password}\") {\n            userId,\n            token\n          }\n        }\n      `\n    };\n\n    try {\n      const res = await fetch('/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Login failed!');\n      } // .json() is a method from fetch API that auto extracts & parses the res body\n\n\n      const data = await res.json(); // Check for errors array in response\n\n      if (data.errors) {\n        return {\n          error: data.errors\n        };\n      } // Set state with returned auth data\n\n\n      const {\n        userId,\n        token\n      } = data.data.login;\n      setAuthState(_objectSpread(_objectSpread({}, authState), {}, {\n        authenticated: true,\n        userId,\n        token\n      })); // Save token to local storage\n\n      localStorage.setItem('token', token); // // Set token as a cookie\n      // cookie.save(\n      //   'userId',\n      //   userId,\n      //   {\n      //     path: '/',\n      //     // expires,\n      //     maxAge: 1000,\n      //     domain: 'http://localhost:3000',\n      //     secure: false,\n      //     httpOnly: false\n      //   }\n      // )\n      // Fetch the user data and set currentUser state\n\n      await getUserDataByToken(token); // Redirect to user's profile page\n\n      Router.push(`/profile/${userId}`); // Return item object indicating no errors\n\n      return {};\n    } catch (err) {\n      console.log(err);\n    }\n  }; // Register a user\n\n\n  const register = async (firstName, lastName, email, password) => {\n    // Make a API query to get a token\n    const requestBody = {\n      query: `\n      mutation {\n        createUser(userInput: {firstName: \"${firstName}\", lastName: \"${lastName}\", email: \"${email}\", password: \"${password}\"}) {\n          email\n        }\n      }\n    `\n    };\n\n    try {\n      // const res = await fetch('/graphql', {\n      const res = await fetch('/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Account creation failed!');\n      } // .json() is a method from fetch API that auto extracts & parses the res body\n\n\n      const data = await res.json(); // Check for errors array in response\n\n      if (data.errors) {\n        return {\n          newUserEmail: '',\n          error: data.errors\n        };\n      }\n\n      const newUserEmail = data.data.createUser.email;\n      return {\n        newUserEmail: newUserEmail,\n        error: []\n      };\n    } catch (err) {\n      console.log(err);\n    }\n  }; // Logout a user\n\n\n  const logout = () => {\n    // Redirect to home page\n    Router.push('/'); // Clear the authState\n\n    setAuthState({\n      authData: null\n    }); // Remove token from localStorage\n\n    localStorage.removeItem('token'); // Clear the current user\n\n    setCurrentUser(emptyUser);\n    setProfileUser(emptyUser); // Redirect to home page\n    // Router.push('/');\n    // console.log('currentUser', currentUser);\n    // console.log('profileUser', profileUser);\n  }; // USER *****************************************************************************\n\n\n  const updateUser = async (firstName, lastName, jobTitle, location, languages, about) => {\n    // Make a API query to get a token\n    const requestBody = {\n      query: `\n      mutation {\n        updateUser(profileInput: {firstName: \"${firstName}\", lastName: \"${lastName}\", jobTitle: \"${jobTitle}\", location: \"${location}\", \n        languages: [\n          \"${languages[0]}\",\n          \"${languages[1]}\", \n          \"${languages[2]}\", \n          \"${languages[3]}\"\n        ],\n        about: \"${about}\"}) {\n          firstName,\n          lastName,\n          jobTitle,\n          location,\n          languages,\n          about\n        }\n      }\n    `\n    };\n\n    try {\n      const res = await fetch('/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authState.token}`\n        }\n      });\n\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('User update failed!');\n      } // .json() is a method from fetch API that auto extracts & parses the res body\n\n\n      const data = await res.json(); // Check for errors array in response\n\n      if (data.errors) {\n        data.errors.map(error => {\n          console.log(error.message);\n        });\n        return;\n      } // Refresh the profile with the new user data - to update the profileInfo section\n\n\n      fetchProfileUser(profileUser.id, false);\n    } catch (err) {\n      console.log(err);\n    }\n  }; // DATA FETCHING *******************************************************************\n\n\n  const getAllUsers = async () => {\n    const requestBody = {\n      query: `\n        query {\n          users {\n            _id,\n            firstName,\n            lastName\n          }\n        }\n      `\n    };\n\n    try {\n      const res = await fetch('/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authState.token}`\n        }\n      });\n\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed to fetch user data');\n      } // .json() is a method from fetch API that auto extracts & parses the res body\n\n\n      const data = await res.json(); // Check for errors array in response\n\n      if (data.errors) {\n        data.errors.map(error => {\n          console.log(error.message);\n        });\n        return;\n      }\n\n      const users = data.data.users; // Get full name for use in searchbar\n\n      const usersWithFullName = users.map(user => {\n        return {\n          id: user._id,\n          name: user.firstName + ' ' + user.lastName\n        };\n      });\n      setAllUsers(usersWithFullName);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const getUserDataById = async (userId, requestBody = {}) => {\n    // console.log('getUserData called with id:', userId)\n    if (requestBody = {}) {\n      requestBody = {\n        query: `\n          query {\n            userById(id:\"${userId}\") {\n              firstName,\n              lastName,\n              jobTitle,\n              location,\n              _id,\n              languages,\n              about,\n              ownedVideos {\n                _id,\n                thumbnailURL,\n                title,\n                videoURL\n              },\n              playlistComments{\n                _id,\n                content,\n                commenter {\n                  _id\n                },\n                createdAt,\n                updatedAt\n              },\n              favourites,\n              profilePhotoFilename\n            }\n          }\n          `\n      };\n    } // console.log(requestBody)\n    // console.log(authState.token)\n\n\n    try {\n      const res = await fetch('/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authState.token}`\n        }\n      });\n\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed to fetch user data');\n      } // .json() is a method from fetch API that auto extracts & parses the res body\n\n\n      const data = await res.json(); // Check for errors array in response\n\n      if (data.errors) {\n        data.errors.map(error => {\n          console.log(error.message);\n        });\n        return;\n      }\n\n      const user = data.data.userById;\n      return user;\n    } catch (err) {\n      console.log(err);\n    }\n  }; // Get logged in user's data and sets it in the userState\n\n\n  const getUserDataByToken = async token => {\n    // console.log('called')\n    let requestBody; // If no userId then query the current logged in user by token\n\n    requestBody = {\n      query: `\n        query {\n          userByToken{\n            firstName,\n            lastName,\n            jobTitle,\n            location,\n            _id,\n            languages,\n            about,\n            ownedVideos {\n              _id,\n              title,\n              thumbnailURL,\n              videoURL\n            },\n            playlistComments{\n              _id,\n              content,\n              commenter {\n              _id \n              },  \n              createdAt,\n              updatedAt\n            },\n            favourites,\n            profilePhotoFilename\n          }\n        }\n      `\n    };\n\n    try {\n      const res = await fetch('/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        }\n      });\n\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed to fetch user data');\n      } // .json() is a method from fetch API that auto extracts & parses the res body\n\n\n      const data = await res.json(); // Check for errors array in response\n\n      if (data.errors) {\n        data.errors.map(error => {\n          console.log(error.message);\n        });\n        return;\n      }\n\n      const user = data.data.userByToken; // console.log(user.firstName)\n      // console.log(user);\n\n      setCurrentUser({\n        id: user._id,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        jobTitle: user.jobTitle,\n        location: user.location,\n        languages: user.languages,\n        about: user.about,\n        ownedVideos: user.ownedVideos,\n        userComments: user.userComments,\n        playlistComments: user.playlistComments,\n        favourites: user.favourites,\n        profilePhotoFilename: user.profilePhotoFilename\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const fetchProfileUser = async (userId, initialFetch) => {\n    if (initialFetch === true) {\n      // Only fetch data if profileUser isn't populated\n      if (profileUser.firstName !== '') {\n        return;\n      } // Only fetch data if the userId has been parsed from the URL\n\n\n      if (userId === undefined) {\n        return;\n      }\n    } // Get the profile user's data using the userId from the URL\n\n\n    const user = await getUserDataById(userId); // Set the state\n\n    setProfileUser({\n      id: userId,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      jobTitle: user.jobTitle,\n      location: user.location,\n      languages: user.languages,\n      about: user.about,\n      ownedVideos: user.ownedVideos,\n      userComments: user.userComments,\n      playlistComments: user.playlistComments,\n      favourites: user.favourites,\n      profilePhotoFilename: user.profilePhotoFilename\n    }); //Set video state to be first video in profile user's playlist\n\n    if (user.ownedVideos.length > 0) {\n      const video = user.ownedVideos[0];\n      setCurrentVideo({\n        title: video.title,\n        videoId: video.videoURL\n      });\n    } // Fetch the user's profile photo\n    // getProfilePhoto(user.profilePhotoFilename);\n\n\n    return user;\n  }; // Reset the ProfileUser state\n\n\n  const clearProfileUser = () => {\n    setProfileUser({\n      id: '',\n      firstName: '',\n      lastName: '',\n      jobTitle: '',\n      location: '',\n      languages: [],\n      about: '',\n      ownedVideos: [],\n      userComments: [],\n      playlistComments: [],\n      favourites: [],\n      profilePhotoFilename: ''\n    });\n  };\n\n  const getCommentUser = async userId => {\n    let requestBody = {\n      query: `\n          query {\n            userById(id:\"${userId}\") {\n              firstName,\n              lastName,\n              profilePhotoFilename\n            }\n          }\n          `\n    };\n    const commentUser = await getUserDataById(userId, requestBody);\n    return commentUser;\n  };\n\n  const getFavouriteUser = async userId => {\n    let requestBody = {\n      query: `\n          query {\n            userById(id:\"${userId}\") {\n              firstName,\n              lastName,\n              profilePhotoFilename\n            }\n          }\n          `\n    };\n    const favouriteUser = await getUserDataById(userId, requestBody);\n    return favouriteUser;\n  }; // const getProfilePhoto = async (filename) => {\n  //   try {\n  //     const res = await axios.get(`http://localhost:5000/file/${filename}`);\n  //     const photo = res.data;\n  //     setProfilePhoto(photo);\n  //   } catch (error) {\n  //     console.log(error);\n  //   }\n  // }\n  // VIDEOS **************************************************************************\n  // Add a video to a user's playlist\n\n\n  const addVideoToPlaylist = async video => {\n    // Send an API request to save the video\n    const requestBody = {\n      query: `\n        mutation {\n          createVideo(videoInput: {title: \"${video.title}\", thumbnailURL: \"${video.thumbnailURL}\", videoURL: \"${video.videoId}\", userId: \"${currentUser.id}\"}) {\n            _id\n          }\n        }\n      `\n    }; // console.log(requestBody)\n    // console.log(authState.token)\n\n    try {\n      const res = await fetch('/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authState.token}`\n        }\n      });\n\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed to create video!');\n      } // .json() is a method from fetch API that auto extracts & parses the res body\n\n\n      const data = await res.json(); // Check for errors array in response\n\n      if (data.errors) {\n        data.errors.map(error => {\n          console.log(error.message);\n        });\n        return;\n      } // Refresh the profile with the new user data - to update the playlist\n\n\n      fetchProfileUser(currentUser.id, false);\n    } catch (err) {\n      console.log(err);\n    }\n  }; // Remove a video from a user's playlist\n\n\n  const removeVideoFromPlaylist = async id => {\n    // Send an API request to save the video\n    const requestBody = {\n      query: `\n        mutation {\n          removeVideo(id: \"${id}\") {\n            ownedVideos {\n              _id,\n              thumbnailURL,\n              title,\n              videoURL\n            }\n          }\n        }\n      `\n    };\n\n    try {\n      const res = await fetch('/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authState.token}`\n        }\n      });\n\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed to remove video!');\n      } // .json() is a method from fetch API that auto extracts & parses the res body\n\n\n      const data = await res.json();\n      console.log(data.data.removeVideo);\n      const videos = data.data.removeVideo.ownedVideos;\n      console.log(videos); // Check for errors array in response\n\n      if (data.errors) {\n        data.errors.map(error => {\n          console.log(error.message);\n        });\n        return;\n      } // Refresh the profile with the new user data - to update the playlist\n\n\n      updateProfileUserVideos(videos);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const updateProfileUserVideos = videos => {\n    // Update the profile user's ownedVideo in th global state\n    setProfileUser(_objectSpread(_objectSpread({}, profileUser), {}, {\n      ownedVideos: videos\n    }));\n  }; // Set a video as the current video for the video player\n\n\n  const setCurrentVideo = video => {\n    setVideoState({\n      title: video.title,\n      // description: video.description,\n      videoId: video.videoId\n    });\n  }; // COMMENTS ***********************************************************************\n  // Add a comment\n\n\n  const addComment = async content => {\n    // Send an API request to save the comment\n    const requestBody = {\n      query: `\n        mutation {\n          createComment(commentInput: {content: \"${content}\", commenterId: \"${currentUser.id}\", playlistOwnerId: \"${profileUser.id}\"}) {\n            _id\n          }\n        }\n      `\n    };\n\n    try {\n      const res = await fetch('/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authState.token}`\n        }\n      });\n\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed to create comment!');\n      } // .json() is a method from fetch API that auto extracts & parses the res body\n\n\n      const data = await res.json(); // Check for errors array in response\n\n      if (data.errors) {\n        data.errors.map(error => {\n          console.log(error.message);\n        });\n        return;\n      } // Refresh the profile with the new user data - to update the comment section\n\n\n      fetchProfileUser(profileUser.id, false);\n    } catch (err) {\n      console.log(err);\n    }\n  }; // Remove a comment from a user's playlist\n\n\n  const removeCommentFromPlaylist = async id => {\n    // Send an API request to delete the comment\n    const requestBody = {\n      query: `\n        mutation {\n          removeComment(id: \"${id}\", playlistOwnerId: \"${profileUser.id}\") {\n            playlistComments{\n              _id,\n              content,\n              commenter {\n                _id\n              },\n              createdAt,\n              updatedAt\n            }\n          }\n        }\n      `\n    };\n\n    try {\n      const res = await fetch('/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authState.token}`\n        }\n      });\n\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed to remove comment!');\n      } // .json() is a method from fetch API that auto extracts & parses the res body\n\n\n      const data = await res.json();\n      const comments = data.data.removeComment.playlistComments; // Check for errors array in response\n\n      if (data.errors) {\n        data.errors.map(error => {\n          console.log(error.message);\n        });\n        return;\n      } // Refresh the profile with the new user data - to update the comments\n\n\n      updateProfileUserComments(comments);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const updateProfileUserComments = comments => {\n    // Update the profile user's playlistComments in the global state\n    setProfileUser(_objectSpread(_objectSpread({}, profileUser), {}, {\n      playlistComments: comments\n    }));\n  };\n\n  const editComment = async (id, content) => {\n    // Make a API query to get a token\n    const requestBody = {\n      query: `\n      mutation {\n        editComment(id: \"${id}\", content: \"${content}\") {\n          content\n        }\n      }\n    `\n    };\n\n    try {\n      const res = await fetch('/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authState.token}`\n        }\n      });\n\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('User update failed!');\n      } // .json() is a method from fetch API that auto extracts & parses the res body\n\n\n      const data = await res.json(); // Check for errors array in response\n\n      if (data.errors) {\n        data.errors.map(error => {\n          console.log(error.message);\n        });\n        return;\n      }\n\n      console.log(data.data); // Refresh the profile with the new user data - to update the comments\n\n      fetchProfileUser(profileUser.id, false);\n    } catch (err) {\n      console.log(err);\n    }\n  }; // Favourites *******************************************************************\n\n\n  const addFavourite = async id => {\n    // Send an API request to add the favourite\n    const requestBody = {\n      query: `\n        mutation {\n          addFavourite(id: \"${id}\") {\n            _id\n          }\n        }\n      `\n    };\n\n    try {\n      const res = await fetch('/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authState.token}`\n        }\n      });\n\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed to add favourite!');\n      } // .json() is a method from fetch API that auto extracts & parses the res body\n\n\n      const data = await res.json(); // Check for errors array in response\n\n      if (data.errors) {\n        data.errors.map(error => {\n          console.log(error.message);\n        });\n        return;\n      } // Refresh the currentUser's data to update the add favourite profile button\n      // getUserDataById(currentUser.id)\n      // Refresh the profile with the new user data - to update the favourites section\n      // fetchProfileUser(id, false)\n\n\n      getUserDataByToken(authState.token);\n    } catch (err) {\n      console.log(err);\n    }\n  }; // Remove a favourite from a users profile\n\n\n  const removeFavourite = async id => {\n    // Send an API request to delete the comment\n    const requestBody = {\n      query: `\n        mutation {\n          removeFavourite(id: \"${id}\") {\n            favourites\n          }\n        }\n      `\n    };\n\n    try {\n      const res = await fetch('/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authState.token}`\n        }\n      });\n\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed to remove favourite!');\n      } // .json() is a method from fetch API that auto extracts & parses the res body\n\n\n      const data = await res.json(); // console.log(data)\n\n      const favourites = data.data.removeFavourite.favourites; // console.log(favourites)\n      // Refresh the profile with the new user data - to update the favourites section\n      // fetchProfileUser(id, false)\n      // Refresh the currentUser's data to update the add favourite profile button\n      // getUserDataById(currentUser.id)\n\n      getUserDataByToken(authState.token); // Check for errors array in response\n\n      if (data.errors) {\n        data.errors.map(error => {\n          console.log(error.message);\n        });\n        return;\n      } // Refresh the profile with the new user data - to update the favourites\n\n\n      updateProfileUserFavourites(favourites);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const updateProfileUserFavourites = favourites => {\n    // Update the profile user's favourites in th global state\n    setProfileUser(_objectSpread(_objectSpread({}, profileUser), {}, {\n      favourites\n    }));\n  }; // PHOTO ***********************************************************************\n\n\n  const uploadFile = async formData => {\n    try {\n      // Make API request to upload the file to the DB\n      const res = await axios.post('/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          'Authorization': `Bearer ${authState.token}`\n        }\n      }); // refresh the profile\n\n      fetchProfileUser(currentUser.id);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return __jsx(ContextProvider, {\n    value: {\n      authState,\n      currentUser,\n      profileUser,\n      setProfileUser,\n      videoState,\n      commentState,\n      allUsers,\n      autoplay,\n      setAutoplay,\n      // profilePhoto,\n      login,\n      register,\n      logout,\n      updateUser,\n      getUserDataById,\n      getUserDataByToken,\n      fetchProfileUser,\n      getCommentUser,\n      getFavouriteUser,\n      addVideoToPlaylist,\n      clearProfileUser,\n      removeVideoFromPlaylist,\n      setCurrentVideo,\n      addComment,\n      editComment,\n      removeCommentFromPlaylist,\n      addFavourite,\n      removeFavourite,\n      uploadFile\n    }\n  }, __jsx(Layout, null, __jsx(AnimatePresence, {\n    exitBeforeEnter: true\n  }, __jsx(Component, pageProps))));\n}; // App.getInitialProps = async context => {\n//   const res = await fetch('path/to/endpoint', {\n//     headers: {\n//       cookie: ctx.req.headers.cookie,\n//     },\n//   });\n//   const user = await res.json();\n//   return { user };\n// const token = cookie.load('token');\n// console.log('token from cookie', token);\n// // if (token) {\n// //   setAuthState({ ...authState, authenticated: true, token: token}); \n// // }\n// return {token : token};\n// }\n\n\nexport default App;","map":{"version":3,"sources":["C:/Coding/MyProjects/coders-jukebox/pages/_app.js"],"names":["ContextProvider","Layout","useState","useEffect","Router","cookie","axios","AnimatePresence","keys","App","Component","pageProps","router","token","getAllUsers","localStorage","getItem","setAuthState","authState","authenticated","getUserDataByToken","emptyUser","id","firstName","lastName","jobTitle","location","languages","about","ownedVideos","userComments","playlistComments","favourites","profilePhotoFilename","userId","tokenExpiration","currentUser","setCurrentUser","profileUser","setProfileUser","videoState","setVideoState","title","videoId","commentState","setCommentState","comment","allUsers","setAllUsers","autoplay","setAutoplay","login","email","password","requestBody","query","res","fetch","method","body","JSON","stringify","headers","status","Error","data","json","errors","error","setItem","push","err","console","log","register","newUserEmail","createUser","logout","authData","removeItem","updateUser","map","message","fetchProfileUser","users","usersWithFullName","user","_id","name","getUserDataById","userById","userByToken","initialFetch","undefined","length","video","setCurrentVideo","videoURL","clearProfileUser","getCommentUser","commentUser","getFavouriteUser","favouriteUser","addVideoToPlaylist","thumbnailURL","removeVideoFromPlaylist","removeVideo","videos","updateProfileUserVideos","addComment","content","removeCommentFromPlaylist","comments","removeComment","updateProfileUserComments","editComment","addFavourite","removeFavourite","updateProfileUserFavourites","uploadFile","formData","post"],"mappings":"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","sourcesContent":["import ContextProvider from '../context/ContextProvider';\r\nimport Layout from '../components/Layout';\r\nimport { useState, useEffect } from 'react';\r\nimport Router from 'next/router';\r\nimport cookie from 'react-cookies';\r\nimport axios from 'axios';\r\n// import { empty } from 'apollo-boost';\r\nimport { AnimatePresence } from 'framer-motion';\r\nimport keys from '../config/keys';\r\n\r\nconst App = ({ Component, pageProps, router }) => {\r\n\r\n  // const port = parseInt(process.env.PORT, 10) || 3000;\r\n  \r\n  // Determine the URI based on dev or prod\r\n  // const URI = process.env.NODE_ENV === 'production' ?\r\n  // 'http://code-tunes.herokuapp.com' :\r\n  //  `http://localhost:${port}`;\r\n\r\n  let token = null;\r\n\r\n  useEffect(() => {\r\n    //Get all users - for the searchbar user search\r\n    getAllUsers();\r\n    \r\n    // Check for token in local storage once the component mounts - i.e. code is now run in the browser (instead of on the server)\r\n    token = localStorage.getItem('token');\r\n    if (token) {\r\n      setAuthState({...authState, authenticated: true, token: token});\r\n      \r\n      // Get the logged in user's data\r\n      getUserDataByToken(token)\r\n\r\n    }\r\n  }, [])\r\n\r\n  const emptyUser = {\r\n    id: '',\r\n    firstName: '',\r\n    lastName: '',\r\n    jobTitle: '',\r\n    location: '',\r\n    languages: [],\r\n    about: '',\r\n    ownedVideos: [],\r\n    userComments: [],\r\n    playlistComments: [],\r\n    favourites: [],\r\n    profilePhotoFilename: ''\r\n  }\r\n\r\n\r\n  // State\r\n  const [authState, setAuthState] = useState({\r\n    authenticated: false,\r\n    userId: null,\r\n    token: null,\r\n    tokenExpiration: null\r\n  });\r\n\r\n  // Logged in User's Data\r\n  const [currentUser, setCurrentUser] = useState(emptyUser);\r\n\r\n  // Current profiles user data\r\n  const [profileUser, setProfileUser] = useState(emptyUser);\r\n\r\n  // const [profilePhoto, setProfilePhoto] = useState(null);\r\n  \r\n  const [videoState, setVideoState] = useState({\r\n    title: '',\r\n    // description:'',\r\n    videoId: ''\r\n  });\r\n\r\n  const [commentState, setCommentState] = useState({\r\n    comment: null\r\n  });\r\n\r\n  const [allUsers, setAllUsers] = useState([]);\r\n\r\n  const [ autoplay, setAutoplay ] = useState(false);\r\n\r\n\r\n\r\n  // AUTHENTICATION *******************************************************************\r\n  \r\n  // Login a user\r\n  const login = async (email, password) => {\r\n\r\n    // Make a API query to get a token\r\n    const requestBody = {\r\n      query: `\r\n        query {\r\n          login(email: \"${email}\", password: \"${password}\") {\r\n            userId,\r\n            token\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch('/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Login failed!');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        return { error: data.errors };\r\n      }\r\n\r\n      // Set state with returned auth data\r\n      const { userId, token } = data.data.login;\r\n\r\n      setAuthState({ ...authState, authenticated: true, userId, token });\r\n\r\n      // Save token to local storage\r\n      localStorage.setItem('token', token)\r\n\r\n      // // Set token as a cookie\r\n      // cookie.save(\r\n      //   'userId',\r\n      //   userId,\r\n      //   {\r\n      //     path: '/',\r\n      //     // expires,\r\n      //     maxAge: 1000,\r\n      //     domain: 'http://localhost:3000',\r\n      //     secure: false,\r\n      //     httpOnly: false\r\n      //   }\r\n      // )\r\n\r\n      // Fetch the user data and set currentUser state\r\n      await getUserDataByToken(token);\r\n\r\n      // Redirect to user's profile page\r\n      Router.push(`/profile/${userId}`);\r\n\r\n      // Return item object indicating no errors\r\n      return {};\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n\r\n  // Register a user\r\n  const register = async (firstName, lastName, email, password) => {\r\n\r\n    // Make a API query to get a token\r\n    const requestBody = {\r\n      query: `\r\n      mutation {\r\n        createUser(userInput: {firstName: \"${firstName}\", lastName: \"${lastName}\", email: \"${email}\", password: \"${password}\"}) {\r\n          email\r\n        }\r\n      }\r\n    `\r\n    }\r\n\r\n    try {\r\n      // const res = await fetch('/graphql', {\r\n      const res = await fetch('/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Account creation failed!');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        return {newUserEmail: '', error: data.errors}\r\n      }\r\n\r\n      const newUserEmail = (data.data.createUser.email);\r\n      return { newUserEmail: newUserEmail, error: []};\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n\r\n  }\r\n\r\n  // Logout a user\r\n  const logout = () => {\r\n    // Redirect to home page\r\n    Router.push('/');\r\n    // Clear the authState\r\n    setAuthState({\r\n      authData: null\r\n    })\r\n    // Remove token from localStorage\r\n    localStorage.removeItem('token');\r\n    // Clear the current user\r\n    setCurrentUser(emptyUser);\r\n\r\n    setProfileUser(emptyUser);\r\n    \r\n    // Redirect to home page\r\n    // Router.push('/');\r\n    // console.log('currentUser', currentUser);\r\n    // console.log('profileUser', profileUser);\r\n  }\r\n\r\n  // USER *****************************************************************************\r\n  const updateUser = async (firstName, lastName, jobTitle, location, languages, about) => {\r\n\r\n    // Make a API query to get a token\r\n    const requestBody = {\r\n      query: `\r\n      mutation {\r\n        updateUser(profileInput: {firstName: \"${firstName}\", lastName: \"${lastName}\", jobTitle: \"${jobTitle}\", location: \"${location}\", \r\n        languages: [\r\n          \"${languages[0]}\",\r\n          \"${languages[1]}\", \r\n          \"${languages[2]}\", \r\n          \"${languages[3]}\"\r\n        ],\r\n        about: \"${about}\"}) {\r\n          firstName,\r\n          lastName,\r\n          jobTitle,\r\n          location,\r\n          languages,\r\n          about\r\n        }\r\n      }\r\n    `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch('/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('User update failed!');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      // Refresh the profile with the new user data - to update the profileInfo section\r\n      fetchProfileUser(profileUser.id, false)\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n\r\n  \r\n\r\n  \r\n  // DATA FETCHING *******************************************************************\r\n\r\n  const getAllUsers = async () => {\r\n\r\n    const requestBody = {\r\n      query: `\r\n        query {\r\n          users {\r\n            _id,\r\n            firstName,\r\n            lastName\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch('/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Failed to fetch user data');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      const users = (data.data.users);\r\n\r\n      // Get full name for use in searchbar\r\n      const usersWithFullName = users.map(user => {\r\n        return {\r\n          id: user._id,\r\n          name: user.firstName + ' ' + user.lastName\r\n        }\r\n      })\r\n\r\n      setAllUsers(usersWithFullName);\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n\r\n  }\r\n  \r\n  \r\n  const getUserDataById = async (userId, requestBody={}) => {\r\n    // console.log('getUserData called with id:', userId)\r\n\r\n    if (requestBody = {}){\r\n      requestBody = {\r\n        query: `\r\n          query {\r\n            userById(id:\"${userId}\") {\r\n              firstName,\r\n              lastName,\r\n              jobTitle,\r\n              location,\r\n              _id,\r\n              languages,\r\n              about,\r\n              ownedVideos {\r\n                _id,\r\n                thumbnailURL,\r\n                title,\r\n                videoURL\r\n              },\r\n              playlistComments{\r\n                _id,\r\n                content,\r\n                commenter {\r\n                  _id\r\n                },\r\n                createdAt,\r\n                updatedAt\r\n              },\r\n              favourites,\r\n              profilePhotoFilename\r\n            }\r\n          }\r\n          `\r\n        }\r\n    }\r\n\r\n\r\n    // console.log(requestBody)\r\n    // console.log(authState.token)\r\n\r\n    try {\r\n      const res = await fetch('/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Failed to fetch user data');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      const user = (data.data.userById);\r\n      return user;\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n\r\n  }\r\n  \r\n  \r\n  // Get logged in user's data and sets it in the userState\r\n  const getUserDataByToken = async (token) => {\r\n\r\n    // console.log('called')\r\n\r\n    let requestBody;\r\n\r\n    // If no userId then query the current logged in user by token\r\n    requestBody = {\r\n      query: `\r\n        query {\r\n          userByToken{\r\n            firstName,\r\n            lastName,\r\n            jobTitle,\r\n            location,\r\n            _id,\r\n            languages,\r\n            about,\r\n            ownedVideos {\r\n              _id,\r\n              title,\r\n              thumbnailURL,\r\n              videoURL\r\n            },\r\n            playlistComments{\r\n              _id,\r\n              content,\r\n              commenter {\r\n              _id \r\n              },  \r\n              createdAt,\r\n              updatedAt\r\n            },\r\n            favourites,\r\n            profilePhotoFilename\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch('/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Failed to fetch user data');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      const user = data.data.userByToken;\r\n      // console.log(user.firstName)\r\n      // console.log(user);\r\n      \r\n      setCurrentUser({\r\n        id: user._id,\r\n        firstName: user.firstName,\r\n        lastName: user.lastName,\r\n        jobTitle: user.jobTitle,\r\n        location: user.location,\r\n        languages: user.languages,\r\n        about: user.about,\r\n        ownedVideos: user.ownedVideos,\r\n        userComments: user.userComments,\r\n        playlistComments: user.playlistComments,\r\n        favourites: user.favourites,\r\n        profilePhotoFilename: user.profilePhotoFilename\r\n      })  \r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    \r\n  }\r\n\r\n  const fetchProfileUser = async (userId, initialFetch) => {\r\n\r\n    if (initialFetch === true) {\r\n      // Only fetch data if profileUser isn't populated\r\n      if (profileUser.firstName !== '') {\r\n        return\r\n      }\r\n      // Only fetch data if the userId has been parsed from the URL\r\n      if (userId === undefined) {\r\n        return\r\n      }\r\n    }\r\n    // Get the profile user's data using the userId from the URL\r\n    const user = await getUserDataById(userId);\r\n\r\n    // Set the state\r\n    setProfileUser({\r\n      id: userId,\r\n      firstName: user.firstName,\r\n      lastName: user.lastName,\r\n      jobTitle: user.jobTitle,\r\n      location: user.location,\r\n      languages: user.languages,\r\n      about: user.about,\r\n      ownedVideos: user.ownedVideos,\r\n      userComments: user.userComments,\r\n      playlistComments: user.playlistComments,\r\n      favourites: user.favourites,\r\n      profilePhotoFilename: user.profilePhotoFilename\r\n\r\n    })\r\n\r\n    //Set video state to be first video in profile user's playlist\r\n    if (user.ownedVideos.length > 0){\r\n      const video = user.ownedVideos[0]\r\n      setCurrentVideo({\r\n        title: video.title,\r\n        videoId: video.videoURL\r\n      })\r\n    }\r\n\r\n    // Fetch the user's profile photo\r\n    // getProfilePhoto(user.profilePhotoFilename);\r\n\r\n    return user;\r\n  }\r\n\r\n  // Reset the ProfileUser state\r\n  const clearProfileUser = () => {\r\n    setProfileUser({\r\n      id: '',\r\n      firstName: '',\r\n      lastName: '',\r\n      jobTitle: '',\r\n      location: '',\r\n      languages: [],\r\n      about: '',\r\n      ownedVideos: [],\r\n      userComments: [],\r\n      playlistComments: [],\r\n      favourites: [],\r\n      profilePhotoFilename: ''\r\n    });\r\n  }\r\n\r\n  const getCommentUser = async (userId) => {\r\n    let requestBody = {\r\n      query: `\r\n          query {\r\n            userById(id:\"${userId}\") {\r\n              firstName,\r\n              lastName,\r\n              profilePhotoFilename\r\n            }\r\n          }\r\n          `\r\n    }\r\n    const commentUser = await getUserDataById(userId, requestBody);\r\n    return commentUser;\r\n  }\r\n\r\n  const getFavouriteUser = async (userId) => {\r\n    let requestBody = {\r\n      query: `\r\n          query {\r\n            userById(id:\"${userId}\") {\r\n              firstName,\r\n              lastName,\r\n              profilePhotoFilename\r\n            }\r\n          }\r\n          `\r\n    }\r\n    const favouriteUser = await getUserDataById(userId, requestBody)\r\n    return favouriteUser;\r\n  }\r\n\r\n  \r\n  // const getProfilePhoto = async (filename) => {\r\n  //   try {\r\n  //     const res = await axios.get(`http://localhost:5000/file/${filename}`);\r\n\r\n  //     const photo = res.data;\r\n\r\n  //     setProfilePhoto(photo);\r\n\r\n\r\n  //   } catch (error) {\r\n  //     console.log(error);\r\n  //   }\r\n  // }\r\n\r\n\r\n\r\n\r\n\r\n  // VIDEOS **************************************************************************\r\n\r\n\r\n  // Add a video to a user's playlist\r\n  const addVideoToPlaylist = async (video) => {\r\n\r\n    // Send an API request to save the video\r\n    const requestBody = {\r\n      query: `\r\n        mutation {\r\n          createVideo(videoInput: {title: \"${video.title}\", thumbnailURL: \"${video.thumbnailURL}\", videoURL: \"${video.videoId}\", userId: \"${currentUser.id}\"}) {\r\n            _id\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    // console.log(requestBody)\r\n    // console.log(authState.token)\r\n\r\n    try {\r\n      const res = await fetch('/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Failed to create video!');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      // Refresh the profile with the new user data - to update the playlist\r\n      fetchProfileUser(currentUser.id, false)\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n\r\n  // Remove a video from a user's playlist\r\n  const removeVideoFromPlaylist = async (id) => {\r\n\r\n  // Send an API request to save the video\r\n    const requestBody = {\r\n      query: `\r\n        mutation {\r\n          removeVideo(id: \"${id}\") {\r\n            ownedVideos {\r\n              _id,\r\n              thumbnailURL,\r\n              title,\r\n              videoURL\r\n            }\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch('/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Failed to remove video!');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      console.log(data.data.removeVideo)\r\n\r\n      const videos = data.data.removeVideo.ownedVideos;\r\n      console.log(videos);\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      // Refresh the profile with the new user data - to update the playlist\r\n      updateProfileUserVideos(videos)\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  const updateProfileUserVideos = (videos) => {\r\n    // Update the profile user's ownedVideo in th global state\r\n    setProfileUser({...profileUser, ownedVideos: videos}) \r\n  }\r\n\r\n  // Set a video as the current video for the video player\r\n  const setCurrentVideo = (video) => {\r\n    setVideoState({\r\n      title: video.title,\r\n      // description: video.description,\r\n      videoId: video.videoId\r\n    })\r\n  }\r\n\r\n\r\n  \r\n  \r\n  // COMMENTS ***********************************************************************\r\n\r\n  // Add a comment\r\n  const addComment = async (content) => {\r\n\r\n    // Send an API request to save the comment\r\n    const requestBody = {\r\n      query: `\r\n        mutation {\r\n          createComment(commentInput: {content: \"${content}\", commenterId: \"${currentUser.id}\", playlistOwnerId: \"${profileUser.id}\"}) {\r\n            _id\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch('/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Failed to create comment!');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      // Refresh the profile with the new user data - to update the comment section\r\n      fetchProfileUser(profileUser.id, false)\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  \r\n  // Remove a comment from a user's playlist\r\n  const removeCommentFromPlaylist = async (id) => {\r\n\r\n    // Send an API request to delete the comment\r\n    const requestBody = {\r\n      query: `\r\n        mutation {\r\n          removeComment(id: \"${id}\", playlistOwnerId: \"${profileUser.id}\") {\r\n            playlistComments{\r\n              _id,\r\n              content,\r\n              commenter {\r\n                _id\r\n              },\r\n              createdAt,\r\n              updatedAt\r\n            }\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch('/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Failed to remove comment!');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      const comments = data.data.removeComment.playlistComments;\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      // Refresh the profile with the new user data - to update the comments\r\n      updateProfileUserComments(comments);\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  const updateProfileUserComments = (comments) => {\r\n    // Update the profile user's playlistComments in the global state\r\n    setProfileUser({ ...profileUser, playlistComments: comments })\r\n  }\r\n\r\n  const editComment = async (id, content) => {\r\n\r\n    // Make a API query to get a token\r\n    const requestBody = {\r\n      query: `\r\n      mutation {\r\n        editComment(id: \"${id}\", content: \"${content}\") {\r\n          content\r\n        }\r\n      }\r\n    `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch('/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('User update failed!');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      console.log(data.data)\r\n\r\n      // Refresh the profile with the new user data - to update the comments\r\n      fetchProfileUser(profileUser.id, false)\r\n\r\n\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n\r\n  // Favourites *******************************************************************\r\n  const addFavourite = async (id) => {\r\n\r\n    // Send an API request to add the favourite\r\n    const requestBody = {\r\n      query: `\r\n        mutation {\r\n          addFavourite(id: \"${id}\") {\r\n            _id\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch('/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Failed to add favourite!');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      \r\n      // Refresh the currentUser's data to update the add favourite profile button\r\n      // getUserDataById(currentUser.id)\r\n      // Refresh the profile with the new user data - to update the favourites section\r\n      // fetchProfileUser(id, false)\r\n      getUserDataByToken(authState.token);\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n\r\n  // Remove a favourite from a users profile\r\n  const removeFavourite = async (id) => {\r\n\r\n    // Send an API request to delete the comment\r\n    const requestBody = {\r\n      query: `\r\n        mutation {\r\n          removeFavourite(id: \"${id}\") {\r\n            favourites\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch('/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Failed to remove favourite!');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // console.log(data)\r\n\r\n      const favourites = data.data.removeFavourite.favourites;\r\n      // console.log(favourites)\r\n\r\n      // Refresh the profile with the new user data - to update the favourites section\r\n      // fetchProfileUser(id, false)\r\n\r\n      // Refresh the currentUser's data to update the add favourite profile button\r\n      // getUserDataById(currentUser.id)\r\n\r\n      getUserDataByToken(authState.token);\r\n\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      // Refresh the profile with the new user data - to update the favourites\r\n      updateProfileUserFavourites(favourites);\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  const updateProfileUserFavourites = (favourites) => {\r\n    // Update the profile user's favourites in th global state\r\n    setProfileUser({ ...profileUser, favourites })\r\n  }\r\n\r\n\r\n  // PHOTO ***********************************************************************\r\n  \r\n  const uploadFile = async (formData) => {\r\n\r\n    try {\r\n      // Make API request to upload the file to the DB\r\n      const res = await axios.post('/upload', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      });\r\n\r\n      // refresh the profile\r\n      fetchProfileUser(currentUser.id)\r\n\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n\r\n  }\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n  return (\r\n    <ContextProvider value={{\r\n      authState,\r\n      currentUser,\r\n      profileUser,\r\n      setProfileUser,\r\n      videoState,\r\n      commentState,\r\n      allUsers,\r\n      autoplay,\r\n      setAutoplay,\r\n      // profilePhoto,\r\n      login,\r\n      register,\r\n      logout,\r\n      updateUser,\r\n      getUserDataById,\r\n      getUserDataByToken,\r\n      fetchProfileUser,\r\n      getCommentUser,\r\n      getFavouriteUser,\r\n      addVideoToPlaylist,\r\n      clearProfileUser,\r\n      removeVideoFromPlaylist,\r\n      setCurrentVideo,\r\n      addComment,\r\n      editComment,\r\n      removeCommentFromPlaylist,\r\n      addFavourite,\r\n      removeFavourite,\r\n      uploadFile\r\n    }}>\r\n      <Layout>\r\n        <AnimatePresence exitBeforeEnter>\r\n          <Component {...pageProps} />\r\n        </AnimatePresence>\r\n      </Layout>\r\n    </ContextProvider>\r\n  )\r\n}\r\n\r\n\r\n// App.getInitialProps = async context => {\r\n\r\n//   const res = await fetch('path/to/endpoint', {\r\n//     headers: {\r\n//       cookie: ctx.req.headers.cookie,\r\n//     },\r\n//   });\r\n//   const user = await res.json();\r\n\r\n//   return { user };\r\n  \r\n  // const token = cookie.load('token');\r\n  // console.log('token from cookie', token);\r\n  \r\n  // // if (token) {\r\n  // //   setAuthState({ ...authState, authenticated: true, token: token}); \r\n  // // }\r\n  // return {token : token};\r\n// }\r\n\r\n\r\n\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}
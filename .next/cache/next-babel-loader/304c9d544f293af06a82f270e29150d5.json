{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport ContextProvider from '../context/ContextProvider';\nimport Layout from '../components/Layout';\nimport { useState, useEffect } from 'react';\nimport Router from 'next/router';\nimport axios from 'axios';\n\nconst App = ({\n  Component,\n  pageProps\n}) => {\n  let token = null;\n  useEffect(() => {\n    // Check for token in local storage once the component mounts - i.e. code is now run in the browser (instead of on the server)\n    token = localStorage.getItem('token');\n\n    if (token) {\n      setAuthState(_objectSpread(_objectSpread({}, authState), {}, {\n        authenticated: true,\n        token: token\n      })); // Get the logged in user's data\n\n      getUserDataByToken(token);\n    }\n  }, []);\n  const emptyUser = {\n    id: '',\n    firstName: '',\n    lastName: '',\n    jobTitle: '',\n    location: '',\n    languages: [],\n    about: '',\n    ownedVideos: [],\n    userComments: [],\n    playlistComments: [],\n    favourites: [],\n    profilePhotoFilename: ''\n  }; // State\n\n  const {\n    0: authState,\n    1: setAuthState\n  } = useState({\n    authenticated: false,\n    userId: null,\n    token: null,\n    tokenExpiration: null\n  }); // Logged in User's Data\n\n  const {\n    0: currentUser,\n    1: setCurrentUser\n  } = useState(emptyUser); // Current profiles user data\n\n  const {\n    0: profileUser,\n    1: setProfileUser\n  } = useState(emptyUser); // const [profilePhoto, setProfilePhoto] = useState(null);\n\n  const {\n    0: videoState,\n    1: setVideoState\n  } = useState({\n    title: '',\n    // description:'',\n    videoId: ''\n  });\n  const {\n    0: commentState,\n    1: setCommentState\n  } = useState({\n    comment: null\n  });\n  const {\n    0: allUsers,\n    1: setAllUsers\n  } = useState([]);\n  const {\n    0: autoplay,\n    1: setAutoplay\n  } = useState(false); // AUTHENTICATION *******************************************************************\n  // Login a user\n\n  const login = async (email, password) => {\n    // Make a API query to get a token\n    const requestBody = {\n      query: `\n        query {\n          login(email: \"${email}\", password: \"${password}\") {\n            userId,\n            token\n          }\n        }\n      `\n    };\n\n    try {\n      const res = await fetch('/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Login failed!');\n      } // .json() is a method from fetch API that auto extracts & parses the res body\n\n\n      const data = await res.json(); // Check for errors array in response\n\n      if (data.errors) {\n        return {\n          error: data.errors\n        };\n      } // Set state with returned auth data\n\n\n      const {\n        userId,\n        token\n      } = data.data.login;\n      setAuthState(_objectSpread(_objectSpread({}, authState), {}, {\n        authenticated: true,\n        userId,\n        token\n      })); // Save token to local storage\n\n      localStorage.setItem('token', token); // Fetch the user data and set currentUser state\n\n      await getUserDataByToken(token); // Redirect to user's profile page\n\n      Router.push(`/profile/${userId}`); // Return item object indicating no errors\n\n      return {};\n    } catch (err) {\n      console.log(err);\n    }\n  }; // Register a user\n\n\n  const register = async (firstName, lastName, email, password) => {\n    // Make a API query to get a token\n    const requestBody = {\n      query: `\n      mutation {\n        createUser(userInput: {firstName: \"${firstName}\", lastName: \"${lastName}\", email: \"${email}\", password: \"${password}\"}) {\n          email\n        }\n      }\n    `\n    };\n\n    try {\n      // const res = await fetch('/graphql', {\n      const res = await fetch('/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Account creation failed!');\n      } // .json() is a method from fetch API that auto extracts & parses the res body\n\n\n      const data = await res.json(); // Check for errors array in response\n\n      if (data.errors) {\n        return {\n          newUserEmail: '',\n          error: data.errors\n        };\n      }\n\n      const newUserEmail = data.data.createUser.email;\n      return {\n        newUserEmail: newUserEmail,\n        error: []\n      };\n    } catch (err) {\n      console.log(err);\n    }\n  }; // Logout a user\n\n\n  const logout = () => {\n    // Redirect to home page\n    Router.push('/'); // Clear the authState\n\n    setAuthState({\n      authData: null\n    }); // Remove token from localStorage\n\n    localStorage.removeItem('token'); // Clear the current user\n\n    setCurrentUser(emptyUser);\n    setProfileUser(emptyUser);\n  }; // USER *****************************************************************************\n\n\n  const updateUser = async (firstName, lastName, jobTitle, location, languages, about) => {\n    // Make a API query to get a token\n    const requestBody = {\n      query: `\n      mutation {\n        updateUser(profileInput: {firstName: \"${firstName}\", lastName: \"${lastName}\", jobTitle: \"${jobTitle}\", location: \"${location}\", \n        languages: [\n          \"${languages[0]}\",\n          \"${languages[1]}\", \n          \"${languages[2]}\", \n          \"${languages[3]}\"\n        ],\n        about: \"${about}\"}) {\n          firstName,\n          lastName,\n          jobTitle,\n          location,\n          languages,\n          about\n        }\n      }\n    `\n    };\n\n    try {\n      const res = await fetch('/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authState.token}`\n        }\n      });\n\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('User update failed!');\n      } // .json() is a method from fetch API that auto extracts & parses the res body\n\n\n      const data = await res.json(); // Check for errors array in response\n\n      if (data.errors) {\n        data.errors.map(error => {\n          console.log(error.message);\n        });\n        return;\n      } // Refresh the profile with the new user data - to update the profileInfo section\n\n\n      fetchProfileUser(profileUser.id, false);\n    } catch (err) {\n      console.log(err);\n    }\n  }; // DATA FETCHING *******************************************************************\n\n\n  const getAllUsers = async () => {\n    const requestBody = {\n      query: `\n        query {\n          users {\n            _id,\n            firstName,\n            lastName\n          }\n        }\n      `\n    };\n\n    try {\n      const res = await fetch('/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authState.token}`\n        }\n      });\n\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed to fetch user data');\n      } // .json() is a method from fetch API that auto extracts & parses the res body\n\n\n      const data = await res.json(); // Check for errors array in response\n\n      if (data.errors) {\n        data.errors.map(error => {\n          console.log(error.message);\n        });\n        return;\n      }\n\n      const users = data.data.users; // Get full name for use in searchbar\n\n      const usersWithFullName = users.map(user => {\n        return {\n          id: user._id,\n          name: user.firstName + ' ' + user.lastName\n        };\n      });\n      setAllUsers(usersWithFullName);\n      return usersWithFullName;\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const getUserDataById = async (userId, requestBody = {}) => {\n    // console.log('getUserData called with id:', userId)\n    if (requestBody = {}) {\n      requestBody = {\n        query: `\n          query {\n            userById(id:\"${userId}\") {\n              firstName,\n              lastName,\n              jobTitle,\n              location,\n              _id,\n              languages,\n              about,\n              ownedVideos {\n                _id,\n                thumbnailURL,\n                title,\n                videoURL\n              },\n              playlistComments{\n                _id,\n                content,\n                commenter {\n                  _id\n                },\n                createdAt,\n                updatedAt\n              },\n              favourites,\n              profilePhotoFilename\n            }\n          }\n          `\n      };\n    }\n\n    try {\n      const res = await fetch('/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authState.token}`\n        }\n      });\n\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed to fetch user data');\n      } // .json() is a method from fetch API that auto extracts & parses the res body\n\n\n      const data = await res.json(); // Check for errors array in response\n\n      if (data.errors) {\n        data.errors.map(error => {\n          console.log(error.message);\n        });\n        return;\n      }\n\n      const user = data.data.userById;\n      return user;\n    } catch (err) {\n      console.log(err);\n    }\n  }; // Get logged in user's data and sets it in the userState\n\n\n  const getUserDataByToken = async token => {\n    let requestBody; // If no userId then query the current logged in user by token\n\n    requestBody = {\n      query: `\n        query {\n          userByToken{\n            firstName,\n            lastName,\n            jobTitle,\n            location,\n            _id,\n            languages,\n            about,\n            ownedVideos {\n              _id,\n              title,\n              thumbnailURL,\n              videoURL\n            },\n            playlistComments{\n              _id,\n              content,\n              commenter {\n              _id \n              },  \n              createdAt,\n              updatedAt\n            },\n            favourites,\n            profilePhotoFilename\n          }\n        }\n      `\n    };\n\n    try {\n      const res = await fetch('/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        }\n      });\n\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed to fetch user data');\n      } // .json() is a method from fetch API that auto extracts & parses the res body\n\n\n      const data = await res.json(); // Check for errors array in response\n\n      if (data.errors) {\n        data.errors.map(error => {\n          console.log(error.message);\n        });\n        return;\n      }\n\n      const user = data.data.userByToken;\n      setCurrentUser({\n        id: user._id,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        jobTitle: user.jobTitle,\n        location: user.location,\n        languages: user.languages,\n        about: user.about,\n        ownedVideos: user.ownedVideos,\n        userComments: user.userComments,\n        playlistComments: user.playlistComments,\n        favourites: user.favourites,\n        profilePhotoFilename: user.profilePhotoFilename\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const fetchProfileUser = async (userId, initialFetch) => {\n    if (initialFetch === true) {\n      // Only fetch data if profileUser isn't populated\n      if (profileUser.firstName !== '') {\n        return;\n      } // Only fetch data if the userId has been parsed from the URL\n\n\n      if (userId === undefined) {\n        return;\n      }\n    } // Get the profile user's data using the userId from the URL\n\n\n    const user = await getUserDataById(userId); // Set the state\n\n    setProfileUser({\n      id: userId,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      jobTitle: user.jobTitle,\n      location: user.location,\n      languages: user.languages,\n      about: user.about,\n      ownedVideos: user.ownedVideos,\n      userComments: user.userComments,\n      playlistComments: user.playlistComments,\n      favourites: user.favourites,\n      profilePhotoFilename: user.profilePhotoFilename\n    }); //Set video state to be first video in profile user's playlist - but only if initial fetch\n\n    if (initialFetch === true & user.ownedVideos.length > 0) {\n      const video = user.ownedVideos[0];\n      setCurrentVideo({\n        title: video.title,\n        videoId: video.videoURL\n      });\n    }\n\n    return user;\n  }; // Reset the ProfileUser state\n\n\n  const clearProfileUser = () => {\n    setProfileUser({\n      id: '',\n      firstName: '',\n      lastName: '',\n      jobTitle: '',\n      location: '',\n      languages: [],\n      about: '',\n      ownedVideos: [],\n      userComments: [],\n      playlistComments: [],\n      favourites: [],\n      profilePhotoFilename: ''\n    });\n  };\n\n  const getCommentUser = async userId => {\n    let requestBody = {\n      query: `\n          query {\n            userById(id:\"${userId}\") {\n              firstName,\n              lastName,\n              profilePhotoFilename\n            }\n          }\n          `\n    };\n    const commentUser = await getUserDataById(userId, requestBody);\n    return commentUser;\n  };\n\n  const getFavouriteUser = async userId => {\n    let requestBody = {\n      query: `\n          query {\n            userById(id:\"${userId}\") {\n              firstName,\n              lastName,\n              profilePhotoFilename\n            }\n          }\n          `\n    };\n    const favouriteUser = await getUserDataById(userId, requestBody);\n    return favouriteUser;\n  }; // VIDEOS **************************************************************************\n  // Add a video to a user's playlist\n\n\n  const addVideoToPlaylist = async video => {\n    // Send an API request to save the video\n    const requestBody = {\n      query: `\n        mutation {\n          createVideo(videoInput: {title: \"${video.title}\", thumbnailURL: \"${video.thumbnailURL}\", videoURL: \"${video.videoId}\", userId: \"${currentUser.id}\"}) {\n            _id\n          }\n        }\n      `\n    };\n\n    try {\n      const res = await fetch('/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authState.token}`\n        }\n      });\n\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed to create video!');\n      } // .json() is a method from fetch API that auto extracts & parses the res body\n\n\n      const data = await res.json(); // Check for errors array in response\n\n      if (data.errors) {\n        data.errors.map(error => {\n          console.log(error.message);\n        });\n        return;\n      } // Refresh the profile with the new user data - to update the playlist\n\n\n      fetchProfileUser(currentUser.id, false);\n    } catch (err) {\n      console.log(err);\n    }\n  }; // Remove a video from a user's playlist\n\n\n  const removeVideoFromPlaylist = async id => {\n    // Send an API request to save the video\n    const requestBody = {\n      query: `\n        mutation {\n          removeVideo(id: \"${id}\") {\n            ownedVideos {\n              _id,\n              thumbnailURL,\n              title,\n              videoURL\n            }\n          }\n        }\n      `\n    };\n\n    try {\n      const res = await fetch('/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authState.token}`\n        }\n      });\n\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed to remove video!');\n      } // .json() is a method from fetch API that auto extracts & parses the res body\n\n\n      const data = await res.json();\n      const videos = data.data.removeVideo.ownedVideos; // Check for errors array in response\n\n      if (data.errors) {\n        data.errors.map(error => {\n          console.log(error.message);\n        });\n        return;\n      } // Refresh the profile with the new user data - to update the playlist\n\n\n      updateProfileUserVideos(videos);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const updateProfileUserVideos = videos => {\n    // Update the profile user's ownedVideo in th global state\n    setProfileUser(_objectSpread(_objectSpread({}, profileUser), {}, {\n      ownedVideos: videos\n    }));\n  }; // Set a video as the current video for the video player\n\n\n  const setCurrentVideo = video => {\n    setVideoState({\n      title: video.title,\n      // description: video.description,\n      videoId: video.videoId\n    });\n  }; // COMMENTS ***********************************************************************\n  // Add a comment\n\n\n  const addComment = async content => {\n    // Send an API request to save the comment\n    const requestBody = {\n      query: `\n        mutation {\n          createComment(commentInput: {content: \"${content}\", commenterId: \"${currentUser.id}\", playlistOwnerId: \"${profileUser.id}\"}) {\n            _id\n          }\n        }\n      `\n    };\n\n    try {\n      const res = await fetch('/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authState.token}`\n        }\n      });\n\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed to create comment!');\n      } // .json() is a method from fetch API that auto extracts & parses the res body\n\n\n      const data = await res.json(); // Check for errors array in response\n\n      if (data.errors) {\n        data.errors.map(error => {\n          console.log(error.message);\n        });\n        return;\n      } // Refresh the profile with the new user data - to update the comment section\n\n\n      fetchProfileUser(profileUser.id, false);\n    } catch (err) {\n      console.log(err);\n    }\n  }; // Remove a comment from a user's playlist\n\n\n  const removeCommentFromPlaylist = async id => {\n    // Send an API request to delete the comment\n    const requestBody = {\n      query: `\n        mutation {\n          removeComment(id: \"${id}\", playlistOwnerId: \"${profileUser.id}\") {\n            playlistComments{\n              _id,\n              content,\n              commenter {\n                _id\n              },\n              createdAt,\n              updatedAt\n            }\n          }\n        }\n      `\n    };\n\n    try {\n      const res = await fetch('/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authState.token}`\n        }\n      });\n\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed to remove comment!');\n      } // .json() is a method from fetch API that auto extracts & parses the res body\n\n\n      const data = await res.json();\n      const comments = data.data.removeComment.playlistComments; // Check for errors array in response\n\n      if (data.errors) {\n        data.errors.map(error => {\n          console.log(error.message);\n        });\n        return;\n      } // Refresh the profile with the new user data - to update the comments\n\n\n      updateProfileUserComments(comments);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const updateProfileUserComments = comments => {\n    // Update the profile user's playlistComments in the global state\n    setProfileUser(_objectSpread(_objectSpread({}, profileUser), {}, {\n      playlistComments: comments\n    }));\n  };\n\n  const editComment = async (id, content) => {\n    // Make a API query to get a token\n    const requestBody = {\n      query: `\n      mutation {\n        editComment(id: \"${id}\", content: \"${content}\") {\n          content\n        }\n      }\n    `\n    };\n\n    try {\n      const res = await fetch('/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authState.token}`\n        }\n      });\n\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('User update failed!');\n      } // .json() is a method from fetch API that auto extracts & parses the res body\n\n\n      const data = await res.json(); // Check for errors array in response\n\n      if (data.errors) {\n        data.errors.map(error => {\n          console.log(error.message);\n        });\n        return;\n      } // Refresh the profile with the new user data - to update the comments\n\n\n      fetchProfileUser(profileUser.id, false);\n    } catch (err) {\n      console.log(err);\n    }\n  }; // Favourites *******************************************************************\n\n\n  const addFavourite = async id => {\n    // Send an API request to add the favourite\n    const requestBody = {\n      query: `\n        mutation {\n          addFavourite(id: \"${id}\") {\n            _id\n          }\n        }\n      `\n    };\n\n    try {\n      const res = await fetch('/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authState.token}`\n        }\n      });\n\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed to add favourite!');\n      } // .json() is a method from fetch API that auto extracts & parses the res body\n\n\n      const data = await res.json(); // Check for errors array in response\n\n      if (data.errors) {\n        data.errors.map(error => {\n          console.log(error.message);\n        });\n        return;\n      }\n\n      getUserDataByToken(authState.token);\n    } catch (err) {\n      console.log(err);\n    }\n  }; // Remove a favourite from a users profile\n\n\n  const removeFavourite = async id => {\n    // Send an API request to delete the comment\n    const requestBody = {\n      query: `\n        mutation {\n          removeFavourite(id: \"${id}\") {\n            favourites\n          }\n        }\n      `\n    };\n\n    try {\n      const res = await fetch('/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authState.token}`\n        }\n      });\n\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed to remove favourite!');\n      } // .json() is a method from fetch API that auto extracts & parses the res body\n\n\n      const data = await res.json();\n      const favourites = data.data.removeFavourite.favourites;\n      getUserDataByToken(authState.token); // Check for errors array in response\n\n      if (data.errors) {\n        data.errors.map(error => {\n          console.log(error.message);\n        });\n        return;\n      } // Refresh the profile with the new user data - to update the favourites\n\n\n      updateProfileUserFavourites(favourites);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const updateProfileUserFavourites = favourites => {\n    // Update the profile user's favourites in th global state\n    setProfileUser(_objectSpread(_objectSpread({}, profileUser), {}, {\n      favourites\n    }));\n  }; // PHOTO ***********************************************************************\n\n\n  const uploadFile = async formData => {\n    try {\n      // Make API request to upload the file to the DB\n      const res = await axios.post('/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          'Authorization': `Bearer ${authState.token}`\n        }\n      }); // refresh the profile\n\n      fetchProfileUser(currentUser.id);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  App.getInitialProps = async () => {\n    //Get all users - for the searchbar user search\n    return getAllUsers();\n  };\n\n  return __jsx(ContextProvider, {\n    value: {\n      authState,\n      currentUser,\n      profileUser,\n      setProfileUser,\n      videoState,\n      commentState,\n      allUsers,\n      autoplay,\n      setAutoplay,\n      login,\n      register,\n      logout,\n      updateUser,\n      getUserDataById,\n      getUserDataByToken,\n      fetchProfileUser,\n      getCommentUser,\n      getFavouriteUser,\n      addVideoToPlaylist,\n      clearProfileUser,\n      removeVideoFromPlaylist,\n      setCurrentVideo,\n      addComment,\n      editComment,\n      removeCommentFromPlaylist,\n      addFavourite,\n      removeFavourite,\n      uploadFile\n    }\n  }, __jsx(Layout, null, __jsx(Component, pageProps)));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Coding/MyProjects/coders-jukebox/pages/_app.js"],"names":["ContextProvider","Layout","useState","useEffect","Router","axios","App","Component","pageProps","token","localStorage","getItem","setAuthState","authState","authenticated","getUserDataByToken","emptyUser","id","firstName","lastName","jobTitle","location","languages","about","ownedVideos","userComments","playlistComments","favourites","profilePhotoFilename","userId","tokenExpiration","currentUser","setCurrentUser","profileUser","setProfileUser","videoState","setVideoState","title","videoId","commentState","setCommentState","comment","allUsers","setAllUsers","autoplay","setAutoplay","login","email","password","requestBody","query","res","fetch","method","body","JSON","stringify","headers","status","Error","data","json","errors","error","setItem","push","err","console","log","register","newUserEmail","createUser","logout","authData","removeItem","updateUser","map","message","fetchProfileUser","getAllUsers","users","usersWithFullName","user","_id","name","getUserDataById","userById","userByToken","initialFetch","undefined","length","video","setCurrentVideo","videoURL","clearProfileUser","getCommentUser","commentUser","getFavouriteUser","favouriteUser","addVideoToPlaylist","thumbnailURL","removeVideoFromPlaylist","videos","removeVideo","updateProfileUserVideos","addComment","content","removeCommentFromPlaylist","comments","removeComment","updateProfileUserComments","editComment","addFavourite","removeFavourite","updateProfileUserFavourites","uploadFile","formData","post","getInitialProps"],"mappings":"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","sourcesContent":["import ContextProvider from '../context/ContextProvider';\r\nimport Layout from '../components/Layout';\r\nimport { useState, useEffect } from 'react';\r\nimport Router from 'next/router';\r\nimport axios from 'axios';\r\n\r\nconst App = ({ Component, pageProps }) => {\r\n\r\n let token = null;\r\n\r\n  useEffect(() => {\r\n    // Check for token in local storage once the component mounts - i.e. code is now run in the browser (instead of on the server)\r\n    token = localStorage.getItem('token');\r\n    if (token) {\r\n      setAuthState({...authState, authenticated: true, token: token});\r\n      \r\n      // Get the logged in user's data\r\n      getUserDataByToken(token)\r\n\r\n    }\r\n  }, [])\r\n\r\n  const emptyUser = {\r\n    id: '',\r\n    firstName: '',\r\n    lastName: '',\r\n    jobTitle: '',\r\n    location: '',\r\n    languages: [],\r\n    about: '',\r\n    ownedVideos: [],\r\n    userComments: [],\r\n    playlistComments: [],\r\n    favourites: [],\r\n    profilePhotoFilename: ''\r\n  }\r\n\r\n\r\n  // State\r\n  const [authState, setAuthState] = useState({\r\n    authenticated: false,\r\n    userId: null,\r\n    token: null,\r\n    tokenExpiration: null\r\n  });\r\n\r\n  // Logged in User's Data\r\n  const [currentUser, setCurrentUser] = useState(emptyUser);\r\n\r\n  // Current profiles user data\r\n  const [profileUser, setProfileUser] = useState(emptyUser);\r\n\r\n  // const [profilePhoto, setProfilePhoto] = useState(null);\r\n  \r\n  const [videoState, setVideoState] = useState({\r\n    title: '',\r\n    // description:'',\r\n    videoId: ''\r\n  });\r\n\r\n  const [commentState, setCommentState] = useState({\r\n    comment: null\r\n  });\r\n\r\n  const [allUsers, setAllUsers] = useState([]);\r\n\r\n  const [ autoplay, setAutoplay ] = useState(false);\r\n\r\n\r\n\r\n  // AUTHENTICATION *******************************************************************\r\n  \r\n  // Login a user\r\n  const login = async (email, password) => {\r\n\r\n    // Make a API query to get a token\r\n    const requestBody = {\r\n      query: `\r\n        query {\r\n          login(email: \"${email}\", password: \"${password}\") {\r\n            userId,\r\n            token\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch('/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Login failed!');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        return { error: data.errors };\r\n      }\r\n\r\n      // Set state with returned auth data\r\n      const { userId, token } = data.data.login;\r\n\r\n      setAuthState({ ...authState, authenticated: true, userId, token });\r\n\r\n      // Save token to local storage\r\n      localStorage.setItem('token', token)\r\n\r\n      // Fetch the user data and set currentUser state\r\n      await getUserDataByToken(token);\r\n\r\n      // Redirect to user's profile page\r\n      Router.push(`/profile/${userId}`);\r\n\r\n      // Return item object indicating no errors\r\n      return {};\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n\r\n  // Register a user\r\n  const register = async (firstName, lastName, email, password) => {\r\n\r\n    // Make a API query to get a token\r\n    const requestBody = {\r\n      query: `\r\n      mutation {\r\n        createUser(userInput: {firstName: \"${firstName}\", lastName: \"${lastName}\", email: \"${email}\", password: \"${password}\"}) {\r\n          email\r\n        }\r\n      }\r\n    `\r\n    }\r\n\r\n    try {\r\n      // const res = await fetch('/graphql', {\r\n      const res = await fetch('/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Account creation failed!');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        return {newUserEmail: '', error: data.errors}\r\n      }\r\n\r\n      const newUserEmail = (data.data.createUser.email);\r\n      return { newUserEmail: newUserEmail, error: []};\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n\r\n  }\r\n\r\n  // Logout a user\r\n  const logout = () => {\r\n    // Redirect to home page\r\n    Router.push('/');\r\n    // Clear the authState\r\n    setAuthState({\r\n      authData: null\r\n    })\r\n    // Remove token from localStorage\r\n    localStorage.removeItem('token');\r\n    // Clear the current user\r\n    setCurrentUser(emptyUser);\r\n\r\n    setProfileUser(emptyUser);\r\n    \r\n  }\r\n\r\n  // USER *****************************************************************************\r\n  const updateUser = async (firstName, lastName, jobTitle, location, languages, about) => {\r\n\r\n    // Make a API query to get a token\r\n    const requestBody = {\r\n      query: `\r\n      mutation {\r\n        updateUser(profileInput: {firstName: \"${firstName}\", lastName: \"${lastName}\", jobTitle: \"${jobTitle}\", location: \"${location}\", \r\n        languages: [\r\n          \"${languages[0]}\",\r\n          \"${languages[1]}\", \r\n          \"${languages[2]}\", \r\n          \"${languages[3]}\"\r\n        ],\r\n        about: \"${about}\"}) {\r\n          firstName,\r\n          lastName,\r\n          jobTitle,\r\n          location,\r\n          languages,\r\n          about\r\n        }\r\n      }\r\n    `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch('/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('User update failed!');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      // Refresh the profile with the new user data - to update the profileInfo section\r\n      fetchProfileUser(profileUser.id, false)\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n\r\n  \r\n\r\n  \r\n  // DATA FETCHING *******************************************************************\r\n\r\n  const getAllUsers = async () => {\r\n\r\n    const requestBody = {\r\n      query: `\r\n        query {\r\n          users {\r\n            _id,\r\n            firstName,\r\n            lastName\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch('/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Failed to fetch user data');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      const users = (data.data.users);\r\n\r\n      // Get full name for use in searchbar\r\n      const usersWithFullName = users.map(user => {\r\n        return {\r\n          id: user._id,\r\n          name: user.firstName + ' ' + user.lastName\r\n        }\r\n      })\r\n\r\n      setAllUsers(usersWithFullName);\r\n\r\n      return usersWithFullName;\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n\r\n  }\r\n  \r\n  \r\n  const getUserDataById = async (userId, requestBody={}) => {\r\n    // console.log('getUserData called with id:', userId)\r\n\r\n    if (requestBody = {}){\r\n      requestBody = {\r\n        query: `\r\n          query {\r\n            userById(id:\"${userId}\") {\r\n              firstName,\r\n              lastName,\r\n              jobTitle,\r\n              location,\r\n              _id,\r\n              languages,\r\n              about,\r\n              ownedVideos {\r\n                _id,\r\n                thumbnailURL,\r\n                title,\r\n                videoURL\r\n              },\r\n              playlistComments{\r\n                _id,\r\n                content,\r\n                commenter {\r\n                  _id\r\n                },\r\n                createdAt,\r\n                updatedAt\r\n              },\r\n              favourites,\r\n              profilePhotoFilename\r\n            }\r\n          }\r\n          `\r\n        }\r\n    }\r\n\r\n    try {\r\n      const res = await fetch('/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Failed to fetch user data');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      const user = (data.data.userById);\r\n      return user;\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n\r\n  }\r\n  \r\n  \r\n  // Get logged in user's data and sets it in the userState\r\n  const getUserDataByToken = async (token) => {\r\n\r\n    let requestBody;\r\n\r\n    // If no userId then query the current logged in user by token\r\n    requestBody = {\r\n      query: `\r\n        query {\r\n          userByToken{\r\n            firstName,\r\n            lastName,\r\n            jobTitle,\r\n            location,\r\n            _id,\r\n            languages,\r\n            about,\r\n            ownedVideos {\r\n              _id,\r\n              title,\r\n              thumbnailURL,\r\n              videoURL\r\n            },\r\n            playlistComments{\r\n              _id,\r\n              content,\r\n              commenter {\r\n              _id \r\n              },  \r\n              createdAt,\r\n              updatedAt\r\n            },\r\n            favourites,\r\n            profilePhotoFilename\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch('/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Failed to fetch user data');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      const user = data.data.userByToken;\r\n      \r\n      setCurrentUser({\r\n        id: user._id,\r\n        firstName: user.firstName,\r\n        lastName: user.lastName,\r\n        jobTitle: user.jobTitle,\r\n        location: user.location,\r\n        languages: user.languages,\r\n        about: user.about,\r\n        ownedVideos: user.ownedVideos,\r\n        userComments: user.userComments,\r\n        playlistComments: user.playlistComments,\r\n        favourites: user.favourites,\r\n        profilePhotoFilename: user.profilePhotoFilename\r\n      })  \r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    \r\n  }\r\n\r\n  const fetchProfileUser = async (userId, initialFetch) => {\r\n\r\n    if (initialFetch === true) {\r\n      // Only fetch data if profileUser isn't populated\r\n      if (profileUser.firstName !== '') {\r\n        return\r\n      }\r\n      // Only fetch data if the userId has been parsed from the URL\r\n      if (userId === undefined) {\r\n        return\r\n      }\r\n    }\r\n    // Get the profile user's data using the userId from the URL\r\n    const user = await getUserDataById(userId);\r\n\r\n    // Set the state\r\n    setProfileUser({\r\n      id: userId,\r\n      firstName: user.firstName,\r\n      lastName: user.lastName,\r\n      jobTitle: user.jobTitle,\r\n      location: user.location,\r\n      languages: user.languages,\r\n      about: user.about,\r\n      ownedVideos: user.ownedVideos,\r\n      userComments: user.userComments,\r\n      playlistComments: user.playlistComments,\r\n      favourites: user.favourites,\r\n      profilePhotoFilename: user.profilePhotoFilename\r\n\r\n    })\r\n\r\n    //Set video state to be first video in profile user's playlist - but only if initial fetch\r\n    if (initialFetch === true & user.ownedVideos.length > 0){\r\n      const video = user.ownedVideos[0]\r\n      setCurrentVideo({\r\n        title: video.title,\r\n        videoId: video.videoURL\r\n      })\r\n    }\r\n    return user;\r\n  }\r\n\r\n  // Reset the ProfileUser state\r\n  const clearProfileUser = () => {\r\n    setProfileUser({\r\n      id: '',\r\n      firstName: '',\r\n      lastName: '',\r\n      jobTitle: '',\r\n      location: '',\r\n      languages: [],\r\n      about: '',\r\n      ownedVideos: [],\r\n      userComments: [],\r\n      playlistComments: [],\r\n      favourites: [],\r\n      profilePhotoFilename: ''\r\n    });\r\n  }\r\n\r\n  const getCommentUser = async (userId) => {\r\n    let requestBody = {\r\n      query: `\r\n          query {\r\n            userById(id:\"${userId}\") {\r\n              firstName,\r\n              lastName,\r\n              profilePhotoFilename\r\n            }\r\n          }\r\n          `\r\n    }\r\n    const commentUser = await getUserDataById(userId, requestBody);\r\n    return commentUser;\r\n  }\r\n\r\n  const getFavouriteUser = async (userId) => {\r\n    let requestBody = {\r\n      query: `\r\n          query {\r\n            userById(id:\"${userId}\") {\r\n              firstName,\r\n              lastName,\r\n              profilePhotoFilename\r\n            }\r\n          }\r\n          `\r\n    }\r\n    const favouriteUser = await getUserDataById(userId, requestBody)\r\n    return favouriteUser;\r\n  }\r\n\r\n\r\n\r\n  // VIDEOS **************************************************************************\r\n\r\n\r\n  // Add a video to a user's playlist\r\n  const addVideoToPlaylist = async (video) => {\r\n\r\n    // Send an API request to save the video\r\n    const requestBody = {\r\n      query: `\r\n        mutation {\r\n          createVideo(videoInput: {title: \"${video.title}\", thumbnailURL: \"${video.thumbnailURL}\", videoURL: \"${video.videoId}\", userId: \"${currentUser.id}\"}) {\r\n            _id\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch('/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Failed to create video!');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      // Refresh the profile with the new user data - to update the playlist\r\n      fetchProfileUser(currentUser.id, false)\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n\r\n  // Remove a video from a user's playlist\r\n  const removeVideoFromPlaylist = async (id) => {\r\n\r\n  // Send an API request to save the video\r\n    const requestBody = {\r\n      query: `\r\n        mutation {\r\n          removeVideo(id: \"${id}\") {\r\n            ownedVideos {\r\n              _id,\r\n              thumbnailURL,\r\n              title,\r\n              videoURL\r\n            }\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch('/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Failed to remove video!');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      const videos = data.data.removeVideo.ownedVideos;\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      // Refresh the profile with the new user data - to update the playlist\r\n      updateProfileUserVideos(videos)\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  const updateProfileUserVideos = (videos) => {\r\n    // Update the profile user's ownedVideo in th global state\r\n    setProfileUser({...profileUser, ownedVideos: videos}) \r\n  }\r\n\r\n  // Set a video as the current video for the video player\r\n  const setCurrentVideo = (video) => {\r\n    setVideoState({\r\n      title: video.title,\r\n      // description: video.description,\r\n      videoId: video.videoId\r\n    })\r\n  }\r\n\r\n\r\n  \r\n  \r\n  // COMMENTS ***********************************************************************\r\n\r\n  // Add a comment\r\n  const addComment = async (content) => {\r\n\r\n    // Send an API request to save the comment\r\n    const requestBody = {\r\n      query: `\r\n        mutation {\r\n          createComment(commentInput: {content: \"${content}\", commenterId: \"${currentUser.id}\", playlistOwnerId: \"${profileUser.id}\"}) {\r\n            _id\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch('/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Failed to create comment!');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      // Refresh the profile with the new user data - to update the comment section\r\n      fetchProfileUser(profileUser.id, false)\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  \r\n  // Remove a comment from a user's playlist\r\n  const removeCommentFromPlaylist = async (id) => {\r\n\r\n    // Send an API request to delete the comment\r\n    const requestBody = {\r\n      query: `\r\n        mutation {\r\n          removeComment(id: \"${id}\", playlistOwnerId: \"${profileUser.id}\") {\r\n            playlistComments{\r\n              _id,\r\n              content,\r\n              commenter {\r\n                _id\r\n              },\r\n              createdAt,\r\n              updatedAt\r\n            }\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch('/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Failed to remove comment!');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      const comments = data.data.removeComment.playlistComments;\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      // Refresh the profile with the new user data - to update the comments\r\n      updateProfileUserComments(comments);\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  const updateProfileUserComments = (comments) => {\r\n    // Update the profile user's playlistComments in the global state\r\n    setProfileUser({ ...profileUser, playlistComments: comments })\r\n  }\r\n\r\n  const editComment = async (id, content) => {\r\n\r\n    // Make a API query to get a token\r\n    const requestBody = {\r\n      query: `\r\n      mutation {\r\n        editComment(id: \"${id}\", content: \"${content}\") {\r\n          content\r\n        }\r\n      }\r\n    `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch('/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('User update failed!');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      // Refresh the profile with the new user data - to update the comments\r\n      fetchProfileUser(profileUser.id, false)\r\n\r\n\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n\r\n  // Favourites *******************************************************************\r\n  const addFavourite = async (id) => {\r\n\r\n    // Send an API request to add the favourite\r\n    const requestBody = {\r\n      query: `\r\n        mutation {\r\n          addFavourite(id: \"${id}\") {\r\n            _id\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch('/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Failed to add favourite!');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n      getUserDataByToken(authState.token);\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n\r\n  // Remove a favourite from a users profile\r\n  const removeFavourite = async (id) => {\r\n\r\n    // Send an API request to delete the comment\r\n    const requestBody = {\r\n      query: `\r\n        mutation {\r\n          removeFavourite(id: \"${id}\") {\r\n            favourites\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch('/graphql', {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Failed to remove favourite!');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      const favourites = data.data.removeFavourite.favourites;\r\n      \r\n      getUserDataByToken(authState.token);\r\n\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      // Refresh the profile with the new user data - to update the favourites\r\n      updateProfileUserFavourites(favourites);\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  const updateProfileUserFavourites = (favourites) => {\r\n    // Update the profile user's favourites in th global state\r\n    setProfileUser({ ...profileUser, favourites })\r\n  }\r\n\r\n\r\n  // PHOTO ***********************************************************************\r\n  \r\n  const uploadFile = async (formData) => {\r\n\r\n    try {\r\n      // Make API request to upload the file to the DB\r\n      const res = await axios.post('/upload', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      });\r\n\r\n      // refresh the profile\r\n      fetchProfileUser(currentUser.id)\r\n\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n\r\n  }\r\n\r\n  App.getInitialProps = async () => {\r\n    //Get all users - for the searchbar user search\r\n    return getAllUsers();\r\n  }\r\n  \r\n\r\n\r\n  return (\r\n    <ContextProvider value={{\r\n      authState,\r\n      currentUser,\r\n      profileUser,\r\n      setProfileUser,\r\n      videoState,\r\n      commentState,\r\n      allUsers,\r\n      autoplay,\r\n      setAutoplay,\r\n      login,\r\n      register,\r\n      logout,\r\n      updateUser,\r\n      getUserDataById,\r\n      getUserDataByToken,\r\n      fetchProfileUser,\r\n      getCommentUser,\r\n      getFavouriteUser,\r\n      addVideoToPlaylist,\r\n      clearProfileUser,\r\n      removeVideoFromPlaylist,\r\n      setCurrentVideo,\r\n      addComment,\r\n      editComment,\r\n      removeCommentFromPlaylist,\r\n      addFavourite,\r\n      removeFavourite,\r\n      uploadFile\r\n    }}>\r\n      <Layout>\r\n          <Component {...pageProps} />\r\n      </Layout>\r\n    </ContextProvider>\r\n  )\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}
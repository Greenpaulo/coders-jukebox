{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport ContextProvider from '../context/ContextProvider';\nimport Layout from '../components/Layout';\nimport { useState, useEffect } from 'react';\nimport Router from 'next/router';\nimport cookie from 'react-cookies';\nimport axios from 'axios'; // import { empty } from 'apollo-boost';\n\nimport { AnimatePresence } from 'framer-motion';\nimport keys from '../config/keys';\n\nvar App = function App(_ref) {\n  _s();\n\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps,\n      router = _ref.router;\n  var port = parseInt(process.env.PORT, 10) || 3000; // Determine the URI based on dev or prod\n\n  var URI = false ? keys.URI : \"http://localhost:\".concat(port);\n  console.log(URI);\n  var token = null;\n  useEffect(function () {\n    //Get all users - for the searchbar user search\n    getAllUsers(); // Check for token in local storage once the component mounts - i.e. code is now run in the browser (instead of on the server)\n\n    token = localStorage.getItem('token');\n\n    if (token) {\n      setAuthState(_objectSpread(_objectSpread({}, authState), {}, {\n        authenticated: true,\n        token: token\n      })); // Get the logged in user's data\n\n      getUserDataByToken(token);\n    }\n  }, []);\n  var emptyUser = {\n    id: '',\n    firstName: '',\n    lastName: '',\n    jobTitle: '',\n    location: '',\n    languages: [],\n    about: '',\n    ownedVideos: [],\n    userComments: [],\n    playlistComments: [],\n    favourites: [],\n    profilePhotoFilename: ''\n  }; // State\n\n  var _useState = useState({\n    authenticated: false,\n    userId: null,\n    token: null,\n    tokenExpiration: null\n  }),\n      authState = _useState[0],\n      setAuthState = _useState[1]; // Logged in User's Data\n\n\n  var _useState2 = useState(emptyUser),\n      currentUser = _useState2[0],\n      setCurrentUser = _useState2[1]; // Current profiles user data\n\n\n  var _useState3 = useState(emptyUser),\n      profileUser = _useState3[0],\n      setProfileUser = _useState3[1]; // const [profilePhoto, setProfilePhoto] = useState(null);\n\n\n  var _useState4 = useState({\n    title: '',\n    // description:'',\n    videoId: ''\n  }),\n      videoState = _useState4[0],\n      setVideoState = _useState4[1];\n\n  var _useState5 = useState({\n    comment: null\n  }),\n      commentState = _useState5[0],\n      setCommentState = _useState5[1];\n\n  var _useState6 = useState([]),\n      allUsers = _useState6[0],\n      setAllUsers = _useState6[1];\n\n  var _useState7 = useState(false),\n      autoplay = _useState7[0],\n      setAutoplay = _useState7[1]; // AUTHENTICATION *******************************************************************\n  // Login a user\n\n\n  var login = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(email, password) {\n      var requestBody, res, data, _data$data$login, userId, _token;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // Make a API query to get a token\n              requestBody = {\n                query: \"\\n        query {\\n          login(email: \\\"\".concat(email, \"\\\", password: \\\"\").concat(password, \"\\\") {\\n            userId,\\n            token\\n          }\\n        }\\n      \")\n              };\n              _context.prev = 1;\n              _context.next = 4;\n              return fetch(\"\".concat(URI, \"/graphql\"), {\n                method: 'POST',\n                body: JSON.stringify(requestBody),\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              });\n\n            case 4:\n              res = _context.sent;\n\n              if (!(res.status !== 200 && res.status !== 201)) {\n                _context.next = 7;\n                break;\n              }\n\n              throw new Error('Login failed!');\n\n            case 7:\n              _context.next = 9;\n              return res.json();\n\n            case 9:\n              data = _context.sent;\n\n              if (!data.errors) {\n                _context.next = 12;\n                break;\n              }\n\n              return _context.abrupt(\"return\", {\n                error: data.errors\n              });\n\n            case 12:\n              // Set state with returned auth data\n              _data$data$login = data.data.login, userId = _data$data$login.userId, _token = _data$data$login.token;\n              setAuthState(_objectSpread(_objectSpread({}, authState), {}, {\n                authenticated: true,\n                userId: userId,\n                token: _token\n              })); // Save token to local storage\n\n              localStorage.setItem('token', _token); // // Set token as a cookie\n              // cookie.save(\n              //   'userId',\n              //   userId,\n              //   {\n              //     path: '/',\n              //     // expires,\n              //     maxAge: 1000,\n              //     domain: 'http://localhost:3000',\n              //     secure: false,\n              //     httpOnly: false\n              //   }\n              // )\n              // Fetch the user data and set currentUser state\n\n              _context.next = 17;\n              return getUserDataByToken(_token);\n\n            case 17:\n              // Redirect to user's profile page\n              Router.push(\"/profile/\".concat(userId)); // Return item object indicating no errors\n\n              return _context.abrupt(\"return\", {});\n\n            case 21:\n              _context.prev = 21;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0);\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 21]]);\n    }));\n\n    return function login(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // Register a user\n\n\n  var register = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(firstName, lastName, email, password) {\n      var requestBody, res, data, newUserEmail;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              // Make a API query to get a token\n              requestBody = {\n                query: \"\\n      mutation {\\n        createUser(userInput: {firstName: \\\"\".concat(firstName, \"\\\", lastName: \\\"\").concat(lastName, \"\\\", email: \\\"\").concat(email, \"\\\", password: \\\"\").concat(password, \"\\\"}) {\\n          email\\n        }\\n      }\\n    \")\n              };\n              _context2.prev = 1;\n              _context2.next = 4;\n              return fetch(\"\".concat(URI, \"/graphql\"), {\n                method: 'POST',\n                body: JSON.stringify(requestBody),\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              });\n\n            case 4:\n              res = _context2.sent;\n\n              if (!(res.status !== 200 && res.status !== 201)) {\n                _context2.next = 7;\n                break;\n              }\n\n              throw new Error('Account creation failed!');\n\n            case 7:\n              _context2.next = 9;\n              return res.json();\n\n            case 9:\n              data = _context2.sent;\n\n              if (!data.errors) {\n                _context2.next = 12;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", {\n                newUserEmail: '',\n                error: data.errors\n              });\n\n            case 12:\n              newUserEmail = data.data.createUser.email;\n              return _context2.abrupt(\"return\", {\n                newUserEmail: newUserEmail,\n                error: []\n              });\n\n            case 16:\n              _context2.prev = 16;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.log(_context2.t0);\n\n            case 19:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 16]]);\n    }));\n\n    return function register(_x3, _x4, _x5, _x6) {\n      return _ref3.apply(this, arguments);\n    };\n  }(); // Logout a user\n\n\n  var logout = function logout() {\n    // Redirect to home page\n    Router.push('/'); // Clear the authState\n\n    setAuthState({\n      authData: null\n    }); // Remove token from localStorage\n\n    localStorage.removeItem('token'); // Clear the current user\n\n    setCurrentUser(emptyUser);\n    setProfileUser(emptyUser); // Redirect to home page\n    // Router.push('/');\n    // console.log('currentUser', currentUser);\n    // console.log('profileUser', profileUser);\n  }; // USER *****************************************************************************\n\n\n  var updateUser = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(firstName, lastName, jobTitle, location, languages, about) {\n      var requestBody, res, data;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              // Make a API query to get a token\n              requestBody = {\n                query: \"\\n      mutation {\\n        updateUser(profileInput: {firstName: \\\"\".concat(firstName, \"\\\", lastName: \\\"\").concat(lastName, \"\\\", jobTitle: \\\"\").concat(jobTitle, \"\\\", location: \\\"\").concat(location, \"\\\", \\n        languages: [\\n          \\\"\").concat(languages[0], \"\\\",\\n          \\\"\").concat(languages[1], \"\\\", \\n          \\\"\").concat(languages[2], \"\\\", \\n          \\\"\").concat(languages[3], \"\\\"\\n        ],\\n        about: \\\"\").concat(about, \"\\\"}) {\\n          firstName,\\n          lastName,\\n          jobTitle,\\n          location,\\n          languages,\\n          about\\n        }\\n      }\\n    \")\n              };\n              _context3.prev = 1;\n              _context3.next = 4;\n              return fetch(\"http://localhost:\".concat(port, \"/graphql\"), {\n                method: 'POST',\n                body: JSON.stringify(requestBody),\n                headers: {\n                  'Content-Type': 'application/json',\n                  'Authorization': \"Bearer \".concat(authState.token)\n                }\n              });\n\n            case 4:\n              res = _context3.sent;\n\n              if (!(res.status !== 200 && res.status !== 201)) {\n                _context3.next = 7;\n                break;\n              }\n\n              throw new Error('User update failed!');\n\n            case 7:\n              _context3.next = 9;\n              return res.json();\n\n            case 9:\n              data = _context3.sent;\n\n              if (!data.errors) {\n                _context3.next = 13;\n                break;\n              }\n\n              data.errors.map(function (error) {\n                console.log(error.message);\n              });\n              return _context3.abrupt(\"return\");\n\n            case 13:\n              // Refresh the profile with the new user data - to update the profileInfo section\n              fetchProfileUser(profileUser.id, false);\n              _context3.next = 19;\n              break;\n\n            case 16:\n              _context3.prev = 16;\n              _context3.t0 = _context3[\"catch\"](1);\n              console.log(_context3.t0);\n\n            case 19:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[1, 16]]);\n    }));\n\n    return function updateUser(_x7, _x8, _x9, _x10, _x11, _x12) {\n      return _ref4.apply(this, arguments);\n    };\n  }(); // DATA FETCHING *******************************************************************\n\n\n  var getAllUsers = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var requestBody, res, data, users, usersWithFullName;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              requestBody = {\n                query: \"\\n        query {\\n          users {\\n            _id,\\n            firstName,\\n            lastName\\n          }\\n        }\\n      \"\n              };\n              _context4.prev = 1;\n              _context4.next = 4;\n              return fetch(\"http://localhost:\".concat(port, \"/graphql\"), {\n                method: 'POST',\n                body: JSON.stringify(requestBody),\n                headers: {\n                  'Content-Type': 'application/json',\n                  'Authorization': \"Bearer \".concat(authState.token)\n                }\n              });\n\n            case 4:\n              res = _context4.sent;\n\n              if (!(res.status !== 200 && res.status !== 201)) {\n                _context4.next = 7;\n                break;\n              }\n\n              throw new Error('Failed to fetch user data');\n\n            case 7:\n              _context4.next = 9;\n              return res.json();\n\n            case 9:\n              data = _context4.sent;\n\n              if (!data.errors) {\n                _context4.next = 13;\n                break;\n              }\n\n              data.errors.map(function (error) {\n                console.log(error.message);\n              });\n              return _context4.abrupt(\"return\");\n\n            case 13:\n              users = data.data.users; // Get full name for use in searchbar\n\n              usersWithFullName = users.map(function (user) {\n                return {\n                  id: user._id,\n                  name: user.firstName + ' ' + user.lastName\n                };\n              });\n              setAllUsers(usersWithFullName);\n              _context4.next = 21;\n              break;\n\n            case 18:\n              _context4.prev = 18;\n              _context4.t0 = _context4[\"catch\"](1);\n              console.log(_context4.t0);\n\n            case 21:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[1, 18]]);\n    }));\n\n    return function getAllUsers() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  var getUserDataById = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(userId) {\n      var requestBody,\n          res,\n          data,\n          user,\n          _args5 = arguments;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              requestBody = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};\n\n              // console.log('getUserData called with id:', userId)\n              if (requestBody = {}) {\n                requestBody = {\n                  query: \"\\n          query {\\n            userById(id:\\\"\".concat(userId, \"\\\") {\\n              firstName,\\n              lastName,\\n              jobTitle,\\n              location,\\n              _id,\\n              languages,\\n              about,\\n              ownedVideos {\\n                _id,\\n                thumbnailURL,\\n                title,\\n                videoURL\\n              },\\n              playlistComments{\\n                _id,\\n                content,\\n                commenter {\\n                  _id\\n                },\\n                createdAt,\\n                updatedAt\\n              },\\n              favourites,\\n              profilePhotoFilename\\n            }\\n          }\\n          \")\n                };\n              } // console.log(requestBody)\n              // console.log(authState.token)\n\n\n              _context5.prev = 2;\n              _context5.next = 5;\n              return fetch(\"http://localhost:\".concat(port, \"/graphql\"), {\n                method: 'POST',\n                body: JSON.stringify(requestBody),\n                headers: {\n                  'Content-Type': 'application/json',\n                  'Authorization': \"Bearer \".concat(authState.token)\n                }\n              });\n\n            case 5:\n              res = _context5.sent;\n\n              if (!(res.status !== 200 && res.status !== 201)) {\n                _context5.next = 8;\n                break;\n              }\n\n              throw new Error('Failed to fetch user data');\n\n            case 8:\n              _context5.next = 10;\n              return res.json();\n\n            case 10:\n              data = _context5.sent;\n\n              if (!data.errors) {\n                _context5.next = 14;\n                break;\n              }\n\n              data.errors.map(function (error) {\n                console.log(error.message);\n              });\n              return _context5.abrupt(\"return\");\n\n            case 14:\n              user = data.data.userById;\n              return _context5.abrupt(\"return\", user);\n\n            case 18:\n              _context5.prev = 18;\n              _context5.t0 = _context5[\"catch\"](2);\n              console.log(_context5.t0);\n\n            case 21:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, null, [[2, 18]]);\n    }));\n\n    return function getUserDataById(_x13) {\n      return _ref6.apply(this, arguments);\n    };\n  }(); // Get logged in user's data and sets it in the userState\n\n\n  var getUserDataByToken = /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(token) {\n      var requestBody, res, data, user;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              // console.log('called')\n              // If no userId then query the current logged in user by token\n              requestBody = {\n                query: \"\\n        query {\\n          userByToken{\\n            firstName,\\n            lastName,\\n            jobTitle,\\n            location,\\n            _id,\\n            languages,\\n            about,\\n            ownedVideos {\\n              _id,\\n              title,\\n              thumbnailURL,\\n              videoURL\\n            },\\n            playlistComments{\\n              _id,\\n              content,\\n              commenter {\\n              _id \\n              },  \\n              createdAt,\\n              updatedAt\\n            },\\n            favourites,\\n            profilePhotoFilename\\n          }\\n        }\\n      \"\n              };\n              _context6.prev = 1;\n              _context6.next = 4;\n              return fetch(\"http://localhost:\".concat(port, \"/graphql\"), {\n                method: 'POST',\n                body: JSON.stringify(requestBody),\n                headers: {\n                  'Content-Type': 'application/json',\n                  'Authorization': \"Bearer \".concat(token)\n                }\n              });\n\n            case 4:\n              res = _context6.sent;\n\n              if (!(res.status !== 200 && res.status !== 201)) {\n                _context6.next = 7;\n                break;\n              }\n\n              throw new Error('Failed to fetch user data');\n\n            case 7:\n              _context6.next = 9;\n              return res.json();\n\n            case 9:\n              data = _context6.sent;\n\n              if (!data.errors) {\n                _context6.next = 13;\n                break;\n              }\n\n              data.errors.map(function (error) {\n                console.log(error.message);\n              });\n              return _context6.abrupt(\"return\");\n\n            case 13:\n              user = data.data.userByToken; // console.log(user.firstName)\n              // console.log(user);\n\n              setCurrentUser({\n                id: user._id,\n                firstName: user.firstName,\n                lastName: user.lastName,\n                jobTitle: user.jobTitle,\n                location: user.location,\n                languages: user.languages,\n                about: user.about,\n                ownedVideos: user.ownedVideos,\n                userComments: user.userComments,\n                playlistComments: user.playlistComments,\n                favourites: user.favourites,\n                profilePhotoFilename: user.profilePhotoFilename\n              });\n              _context6.next = 20;\n              break;\n\n            case 17:\n              _context6.prev = 17;\n              _context6.t0 = _context6[\"catch\"](1);\n              console.log(_context6.t0);\n\n            case 20:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[1, 17]]);\n    }));\n\n    return function getUserDataByToken(_x14) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n\n  var fetchProfileUser = /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(userId, initialFetch) {\n      var user, video;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              if (!(initialFetch === true)) {\n                _context7.next = 5;\n                break;\n              }\n\n              if (!(profileUser.firstName !== '')) {\n                _context7.next = 3;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 3:\n              if (!(userId === undefined)) {\n                _context7.next = 5;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 5:\n              _context7.next = 7;\n              return getUserDataById(userId);\n\n            case 7:\n              user = _context7.sent;\n              // Set the state\n              setProfileUser({\n                id: userId,\n                firstName: user.firstName,\n                lastName: user.lastName,\n                jobTitle: user.jobTitle,\n                location: user.location,\n                languages: user.languages,\n                about: user.about,\n                ownedVideos: user.ownedVideos,\n                userComments: user.userComments,\n                playlistComments: user.playlistComments,\n                favourites: user.favourites,\n                profilePhotoFilename: user.profilePhotoFilename\n              }); //Set video state to be first video in profile user's playlist\n\n              if (user.ownedVideos.length > 0) {\n                video = user.ownedVideos[0];\n                setCurrentVideo({\n                  title: video.title,\n                  videoId: video.videoURL\n                });\n              } // Fetch the user's profile photo\n              // getProfilePhoto(user.profilePhotoFilename);\n\n\n              return _context7.abrupt(\"return\", user);\n\n            case 11:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function fetchProfileUser(_x15, _x16) {\n      return _ref8.apply(this, arguments);\n    };\n  }(); // Reset the ProfileUser state\n\n\n  var clearProfileUser = function clearProfileUser() {\n    setProfileUser({\n      id: '',\n      firstName: '',\n      lastName: '',\n      jobTitle: '',\n      location: '',\n      languages: [],\n      about: '',\n      ownedVideos: [],\n      userComments: [],\n      playlistComments: [],\n      favourites: [],\n      profilePhotoFilename: ''\n    });\n  };\n\n  var getCommentUser = /*#__PURE__*/function () {\n    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(userId) {\n      var requestBody, commentUser;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              requestBody = {\n                query: \"\\n          query {\\n            userById(id:\\\"\".concat(userId, \"\\\") {\\n              firstName,\\n              lastName,\\n              profilePhotoFilename\\n            }\\n          }\\n          \")\n              };\n              _context8.next = 3;\n              return getUserDataById(userId, requestBody);\n\n            case 3:\n              commentUser = _context8.sent;\n              return _context8.abrupt(\"return\", commentUser);\n\n            case 5:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function getCommentUser(_x17) {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n\n  var getFavouriteUser = /*#__PURE__*/function () {\n    var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(userId) {\n      var requestBody, favouriteUser;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              requestBody = {\n                query: \"\\n          query {\\n            userById(id:\\\"\".concat(userId, \"\\\") {\\n              firstName,\\n              lastName,\\n              profilePhotoFilename\\n            }\\n          }\\n          \")\n              };\n              _context9.next = 3;\n              return getUserDataById(userId, requestBody);\n\n            case 3:\n              favouriteUser = _context9.sent;\n              return _context9.abrupt(\"return\", favouriteUser);\n\n            case 5:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    return function getFavouriteUser(_x18) {\n      return _ref10.apply(this, arguments);\n    };\n  }(); // const getProfilePhoto = async (filename) => {\n  //   try {\n  //     const res = await axios.get(`http://localhost:5000/file/${filename}`);\n  //     const photo = res.data;\n  //     setProfilePhoto(photo);\n  //   } catch (error) {\n  //     console.log(error);\n  //   }\n  // }\n  // VIDEOS **************************************************************************\n  // Add a video to a user's playlist\n\n\n  var addVideoToPlaylist = /*#__PURE__*/function () {\n    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(video) {\n      var requestBody, res, data;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              // Send an API request to save the video\n              requestBody = {\n                query: \"\\n        mutation {\\n          createVideo(videoInput: {title: \\\"\".concat(video.title, \"\\\", thumbnailURL: \\\"\").concat(video.thumbnailURL, \"\\\", videoURL: \\\"\").concat(video.videoId, \"\\\", userId: \\\"\").concat(currentUser.id, \"\\\"}) {\\n            _id\\n          }\\n        }\\n      \")\n              }; // console.log(requestBody)\n              // console.log(authState.token)\n\n              _context10.prev = 1;\n              _context10.next = 4;\n              return fetch(\"http://localhost:\".concat(port, \"/graphql\"), {\n                method: 'POST',\n                body: JSON.stringify(requestBody),\n                headers: {\n                  'Content-Type': 'application/json',\n                  'Authorization': \"Bearer \".concat(authState.token)\n                }\n              });\n\n            case 4:\n              res = _context10.sent;\n\n              if (!(res.status !== 200 && res.status !== 201)) {\n                _context10.next = 7;\n                break;\n              }\n\n              throw new Error('Failed to create video!');\n\n            case 7:\n              _context10.next = 9;\n              return res.json();\n\n            case 9:\n              data = _context10.sent;\n\n              if (!data.errors) {\n                _context10.next = 13;\n                break;\n              }\n\n              data.errors.map(function (error) {\n                console.log(error.message);\n              });\n              return _context10.abrupt(\"return\");\n\n            case 13:\n              // Refresh the profile with the new user data - to update the playlist\n              fetchProfileUser(currentUser.id, false);\n              _context10.next = 19;\n              break;\n\n            case 16:\n              _context10.prev = 16;\n              _context10.t0 = _context10[\"catch\"](1);\n              console.log(_context10.t0);\n\n            case 19:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, null, [[1, 16]]);\n    }));\n\n    return function addVideoToPlaylist(_x19) {\n      return _ref11.apply(this, arguments);\n    };\n  }(); // Remove a video from a user's playlist\n\n\n  var removeVideoFromPlaylist = /*#__PURE__*/function () {\n    var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(id) {\n      var requestBody, res, data, videos;\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              // Send an API request to save the video\n              requestBody = {\n                query: \"\\n        mutation {\\n          removeVideo(id: \\\"\".concat(id, \"\\\") {\\n            ownedVideos {\\n              _id,\\n              thumbnailURL,\\n              title,\\n              videoURL\\n            }\\n          }\\n        }\\n      \")\n              };\n              _context11.prev = 1;\n              _context11.next = 4;\n              return fetch(\"http://localhost:\".concat(port, \"/graphql\"), {\n                method: 'POST',\n                body: JSON.stringify(requestBody),\n                headers: {\n                  'Content-Type': 'application/json',\n                  'Authorization': \"Bearer \".concat(authState.token)\n                }\n              });\n\n            case 4:\n              res = _context11.sent;\n\n              if (!(res.status !== 200 && res.status !== 201)) {\n                _context11.next = 7;\n                break;\n              }\n\n              throw new Error('Failed to remove video!');\n\n            case 7:\n              _context11.next = 9;\n              return res.json();\n\n            case 9:\n              data = _context11.sent;\n              console.log(data.data.removeVideo);\n              videos = data.data.removeVideo.ownedVideos;\n              console.log(videos); // Check for errors array in response\n\n              if (!data.errors) {\n                _context11.next = 16;\n                break;\n              }\n\n              data.errors.map(function (error) {\n                console.log(error.message);\n              });\n              return _context11.abrupt(\"return\");\n\n            case 16:\n              // Refresh the profile with the new user data - to update the playlist\n              updateProfileUserVideos(videos);\n              _context11.next = 22;\n              break;\n\n            case 19:\n              _context11.prev = 19;\n              _context11.t0 = _context11[\"catch\"](1);\n              console.log(_context11.t0);\n\n            case 22:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, null, [[1, 19]]);\n    }));\n\n    return function removeVideoFromPlaylist(_x20) {\n      return _ref12.apply(this, arguments);\n    };\n  }();\n\n  var updateProfileUserVideos = function updateProfileUserVideos(videos) {\n    // Update the profile user's ownedVideo in th global state\n    setProfileUser(_objectSpread(_objectSpread({}, profileUser), {}, {\n      ownedVideos: videos\n    }));\n  }; // Set a video as the current video for the video player\n\n\n  var setCurrentVideo = function setCurrentVideo(video) {\n    setVideoState({\n      title: video.title,\n      // description: video.description,\n      videoId: video.videoId\n    });\n  }; // COMMENTS ***********************************************************************\n  // Add a comment\n\n\n  var addComment = /*#__PURE__*/function () {\n    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(content) {\n      var requestBody, res, data;\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              // Send an API request to save the comment\n              requestBody = {\n                query: \"\\n        mutation {\\n          createComment(commentInput: {content: \\\"\".concat(content, \"\\\", commenterId: \\\"\").concat(currentUser.id, \"\\\", playlistOwnerId: \\\"\").concat(profileUser.id, \"\\\"}) {\\n            _id\\n          }\\n        }\\n      \")\n              };\n              _context12.prev = 1;\n              _context12.next = 4;\n              return fetch(\"http://localhost:\".concat(port, \"/graphql\"), {\n                method: 'POST',\n                body: JSON.stringify(requestBody),\n                headers: {\n                  'Content-Type': 'application/json',\n                  'Authorization': \"Bearer \".concat(authState.token)\n                }\n              });\n\n            case 4:\n              res = _context12.sent;\n\n              if (!(res.status !== 200 && res.status !== 201)) {\n                _context12.next = 7;\n                break;\n              }\n\n              throw new Error('Failed to create comment!');\n\n            case 7:\n              _context12.next = 9;\n              return res.json();\n\n            case 9:\n              data = _context12.sent;\n\n              if (!data.errors) {\n                _context12.next = 13;\n                break;\n              }\n\n              data.errors.map(function (error) {\n                console.log(error.message);\n              });\n              return _context12.abrupt(\"return\");\n\n            case 13:\n              // Refresh the profile with the new user data - to update the comment section\n              fetchProfileUser(profileUser.id, false);\n              _context12.next = 19;\n              break;\n\n            case 16:\n              _context12.prev = 16;\n              _context12.t0 = _context12[\"catch\"](1);\n              console.log(_context12.t0);\n\n            case 19:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, null, [[1, 16]]);\n    }));\n\n    return function addComment(_x21) {\n      return _ref13.apply(this, arguments);\n    };\n  }(); // Remove a comment from a user's playlist\n\n\n  var removeCommentFromPlaylist = /*#__PURE__*/function () {\n    var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(id) {\n      var requestBody, res, data, comments;\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              // Send an API request to delete the comment\n              requestBody = {\n                query: \"\\n        mutation {\\n          removeComment(id: \\\"\".concat(id, \"\\\", playlistOwnerId: \\\"\").concat(profileUser.id, \"\\\") {\\n            playlistComments{\\n              _id,\\n              content,\\n              commenter {\\n                _id\\n              },\\n              createdAt,\\n              updatedAt\\n            }\\n          }\\n        }\\n      \")\n              };\n              _context13.prev = 1;\n              _context13.next = 4;\n              return fetch(\"http://localhost:\".concat(port, \"/graphql\"), {\n                method: 'POST',\n                body: JSON.stringify(requestBody),\n                headers: {\n                  'Content-Type': 'application/json',\n                  'Authorization': \"Bearer \".concat(authState.token)\n                }\n              });\n\n            case 4:\n              res = _context13.sent;\n\n              if (!(res.status !== 200 && res.status !== 201)) {\n                _context13.next = 7;\n                break;\n              }\n\n              throw new Error('Failed to remove comment!');\n\n            case 7:\n              _context13.next = 9;\n              return res.json();\n\n            case 9:\n              data = _context13.sent;\n              comments = data.data.removeComment.playlistComments; // Check for errors array in response\n\n              if (!data.errors) {\n                _context13.next = 14;\n                break;\n              }\n\n              data.errors.map(function (error) {\n                console.log(error.message);\n              });\n              return _context13.abrupt(\"return\");\n\n            case 14:\n              // Refresh the profile with the new user data - to update the comments\n              updateProfileUserComments(comments);\n              _context13.next = 20;\n              break;\n\n            case 17:\n              _context13.prev = 17;\n              _context13.t0 = _context13[\"catch\"](1);\n              console.log(_context13.t0);\n\n            case 20:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, null, [[1, 17]]);\n    }));\n\n    return function removeCommentFromPlaylist(_x22) {\n      return _ref14.apply(this, arguments);\n    };\n  }();\n\n  var updateProfileUserComments = function updateProfileUserComments(comments) {\n    // Update the profile user's playlistComments in the global state\n    setProfileUser(_objectSpread(_objectSpread({}, profileUser), {}, {\n      playlistComments: comments\n    }));\n  };\n\n  var editComment = /*#__PURE__*/function () {\n    var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(id, content) {\n      var requestBody, res, data;\n      return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              // Make a API query to get a token\n              requestBody = {\n                query: \"\\n      mutation {\\n        editComment(id: \\\"\".concat(id, \"\\\", content: \\\"\").concat(content, \"\\\") {\\n          content\\n        }\\n      }\\n    \")\n              };\n              _context14.prev = 1;\n              _context14.next = 4;\n              return fetch(\"http://localhost:\".concat(port, \"/graphql\"), {\n                method: 'POST',\n                body: JSON.stringify(requestBody),\n                headers: {\n                  'Content-Type': 'application/json',\n                  'Authorization': \"Bearer \".concat(authState.token)\n                }\n              });\n\n            case 4:\n              res = _context14.sent;\n\n              if (!(res.status !== 200 && res.status !== 201)) {\n                _context14.next = 7;\n                break;\n              }\n\n              throw new Error('User update failed!');\n\n            case 7:\n              _context14.next = 9;\n              return res.json();\n\n            case 9:\n              data = _context14.sent;\n\n              if (!data.errors) {\n                _context14.next = 13;\n                break;\n              }\n\n              data.errors.map(function (error) {\n                console.log(error.message);\n              });\n              return _context14.abrupt(\"return\");\n\n            case 13:\n              console.log(data.data); // Refresh the profile with the new user data - to update the comments\n\n              fetchProfileUser(profileUser.id, false);\n              _context14.next = 20;\n              break;\n\n            case 17:\n              _context14.prev = 17;\n              _context14.t0 = _context14[\"catch\"](1);\n              console.log(_context14.t0);\n\n            case 20:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14, null, [[1, 17]]);\n    }));\n\n    return function editComment(_x23, _x24) {\n      return _ref15.apply(this, arguments);\n    };\n  }(); // Favourites *******************************************************************\n\n\n  var addFavourite = /*#__PURE__*/function () {\n    var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(id) {\n      var requestBody, res, data;\n      return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              // Send an API request to add the favourite\n              requestBody = {\n                query: \"\\n        mutation {\\n          addFavourite(id: \\\"\".concat(id, \"\\\") {\\n            _id\\n          }\\n        }\\n      \")\n              };\n              _context15.prev = 1;\n              _context15.next = 4;\n              return fetch(\"http://localhost:\".concat(port, \"/graphql\"), {\n                method: 'POST',\n                body: JSON.stringify(requestBody),\n                headers: {\n                  'Content-Type': 'application/json',\n                  'Authorization': \"Bearer \".concat(authState.token)\n                }\n              });\n\n            case 4:\n              res = _context15.sent;\n\n              if (!(res.status !== 200 && res.status !== 201)) {\n                _context15.next = 7;\n                break;\n              }\n\n              throw new Error('Failed to add favourite!');\n\n            case 7:\n              _context15.next = 9;\n              return res.json();\n\n            case 9:\n              data = _context15.sent;\n\n              if (!data.errors) {\n                _context15.next = 13;\n                break;\n              }\n\n              data.errors.map(function (error) {\n                console.log(error.message);\n              });\n              return _context15.abrupt(\"return\");\n\n            case 13:\n              // Refresh the currentUser's data to update the add favourite profile button\n              // getUserDataById(currentUser.id)\n              // Refresh the profile with the new user data - to update the favourites section\n              // fetchProfileUser(id, false)\n              getUserDataByToken(authState.token);\n              _context15.next = 19;\n              break;\n\n            case 16:\n              _context15.prev = 16;\n              _context15.t0 = _context15[\"catch\"](1);\n              console.log(_context15.t0);\n\n            case 19:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15, null, [[1, 16]]);\n    }));\n\n    return function addFavourite(_x25) {\n      return _ref16.apply(this, arguments);\n    };\n  }(); // Remove a favourite from a users profile\n\n\n  var removeFavourite = /*#__PURE__*/function () {\n    var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(id) {\n      var requestBody, res, data, favourites;\n      return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              // Send an API request to delete the comment\n              requestBody = {\n                query: \"\\n        mutation {\\n          removeFavourite(id: \\\"\".concat(id, \"\\\") {\\n            favourites\\n          }\\n        }\\n      \")\n              };\n              _context16.prev = 1;\n              _context16.next = 4;\n              return fetch(\"http://localhost:\".concat(port, \"/graphql\"), {\n                method: 'POST',\n                body: JSON.stringify(requestBody),\n                headers: {\n                  'Content-Type': 'application/json',\n                  'Authorization': \"Bearer \".concat(authState.token)\n                }\n              });\n\n            case 4:\n              res = _context16.sent;\n\n              if (!(res.status !== 200 && res.status !== 201)) {\n                _context16.next = 7;\n                break;\n              }\n\n              throw new Error('Failed to remove favourite!');\n\n            case 7:\n              _context16.next = 9;\n              return res.json();\n\n            case 9:\n              data = _context16.sent;\n              // console.log(data)\n              favourites = data.data.removeFavourite.favourites; // console.log(favourites)\n              // Refresh the profile with the new user data - to update the favourites section\n              // fetchProfileUser(id, false)\n              // Refresh the currentUser's data to update the add favourite profile button\n              // getUserDataById(currentUser.id)\n\n              getUserDataByToken(authState.token); // Check for errors array in response\n\n              if (!data.errors) {\n                _context16.next = 15;\n                break;\n              }\n\n              data.errors.map(function (error) {\n                console.log(error.message);\n              });\n              return _context16.abrupt(\"return\");\n\n            case 15:\n              // Refresh the profile with the new user data - to update the favourites\n              updateProfileUserFavourites(favourites);\n              _context16.next = 21;\n              break;\n\n            case 18:\n              _context16.prev = 18;\n              _context16.t0 = _context16[\"catch\"](1);\n              console.log(_context16.t0);\n\n            case 21:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee16, null, [[1, 18]]);\n    }));\n\n    return function removeFavourite(_x26) {\n      return _ref17.apply(this, arguments);\n    };\n  }();\n\n  var updateProfileUserFavourites = function updateProfileUserFavourites(favourites) {\n    // Update the profile user's favourites in th global state\n    setProfileUser(_objectSpread(_objectSpread({}, profileUser), {}, {\n      favourites: favourites\n    }));\n  }; // PHOTO ***********************************************************************\n\n\n  var uploadFile = /*#__PURE__*/function () {\n    var _ref18 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(formData) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              _context17.prev = 0;\n              _context17.next = 3;\n              return axios.post(\"http://localhost:\".concat(port, \"/upload\"), formData, {\n                headers: {\n                  'Content-Type': 'multipart/form-data',\n                  'Authorization': \"Bearer \".concat(authState.token)\n                }\n              });\n\n            case 3:\n              res = _context17.sent;\n              // refresh the profile\n              fetchProfileUser(currentUser.id);\n              _context17.next = 10;\n              break;\n\n            case 7:\n              _context17.prev = 7;\n              _context17.t0 = _context17[\"catch\"](0);\n              console.log(_context17.t0);\n\n            case 10:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, _callee17, null, [[0, 7]]);\n    }));\n\n    return function uploadFile(_x27) {\n      return _ref18.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(ContextProvider, {\n    value: {\n      authState: authState,\n      currentUser: currentUser,\n      profileUser: profileUser,\n      setProfileUser: setProfileUser,\n      videoState: videoState,\n      commentState: commentState,\n      allUsers: allUsers,\n      autoplay: autoplay,\n      setAutoplay: setAutoplay,\n      // profilePhoto,\n      login: login,\n      register: register,\n      logout: logout,\n      updateUser: updateUser,\n      getUserDataById: getUserDataById,\n      getUserDataByToken: getUserDataByToken,\n      fetchProfileUser: fetchProfileUser,\n      getCommentUser: getCommentUser,\n      getFavouriteUser: getFavouriteUser,\n      addVideoToPlaylist: addVideoToPlaylist,\n      clearProfileUser: clearProfileUser,\n      removeVideoFromPlaylist: removeVideoFromPlaylist,\n      setCurrentVideo: setCurrentVideo,\n      addComment: addComment,\n      editComment: editComment,\n      removeCommentFromPlaylist: removeCommentFromPlaylist,\n      addFavourite: addFavourite,\n      removeFavourite: removeFavourite,\n      uploadFile: uploadFile\n    }\n  }, __jsx(Layout, null, __jsx(AnimatePresence, {\n    exitBeforeEnter: true\n  }, __jsx(Component, pageProps))));\n}; // App.getInitialProps = async context => {\n//   const res = await fetch('path/to/endpoint', {\n//     headers: {\n//       cookie: ctx.req.headers.cookie,\n//     },\n//   });\n//   const user = await res.json();\n//   return { user };\n// const token = cookie.load('token');\n// console.log('token from cookie', token);\n// // if (token) {\n// //   setAuthState({ ...authState, authenticated: true, token: token}); \n// // }\n// return {token : token};\n// }\n\n\n_s(App, \"wBZllvs3JtRA8l9IuIpJu7IJ/vU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Coding/MyProjects/coders-jukebox/pages/_app.js"],"names":["ContextProvider","Layout","useState","useEffect","Router","cookie","axios","AnimatePresence","keys","App","Component","pageProps","router","port","parseInt","process","env","PORT","URI","console","log","token","getAllUsers","localStorage","getItem","setAuthState","authState","authenticated","getUserDataByToken","emptyUser","id","firstName","lastName","jobTitle","location","languages","about","ownedVideos","userComments","playlistComments","favourites","profilePhotoFilename","userId","tokenExpiration","currentUser","setCurrentUser","profileUser","setProfileUser","title","videoId","videoState","setVideoState","comment","commentState","setCommentState","allUsers","setAllUsers","autoplay","setAutoplay","login","email","password","requestBody","query","fetch","method","body","JSON","stringify","headers","res","status","Error","json","data","errors","error","setItem","push","register","newUserEmail","createUser","logout","authData","removeItem","updateUser","map","message","fetchProfileUser","users","usersWithFullName","user","_id","name","getUserDataById","userById","userByToken","initialFetch","undefined","length","video","setCurrentVideo","videoURL","clearProfileUser","getCommentUser","commentUser","getFavouriteUser","favouriteUser","addVideoToPlaylist","thumbnailURL","removeVideoFromPlaylist","removeVideo","videos","updateProfileUserVideos","addComment","content","removeCommentFromPlaylist","comments","removeComment","updateProfileUserComments","editComment","addFavourite","removeFavourite","updateProfileUserFavourites","uploadFile","formData","post"],"mappings":"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","sourcesContent":["import ContextProvider from '../context/ContextProvider';\r\nimport Layout from '../components/Layout';\r\nimport { useState, useEffect } from 'react';\r\nimport Router from 'next/router';\r\nimport cookie from 'react-cookies';\r\nimport axios from 'axios';\r\n// import { empty } from 'apollo-boost';\r\nimport { AnimatePresence } from 'framer-motion';\r\nimport keys from '../config/keys';\r\n\r\nconst App = ({ Component, pageProps, router }) => {\r\n\r\n  const port = parseInt(process.env.PORT, 10) || 3000;\r\n  \r\n  // Determine the URI based on dev or prod\r\n  const URI = process.env.NODE_ENV === 'production' \r\n    ? keys.URI :\r\n   `http://localhost:${port}`;\r\n\r\n   console.log(URI)\r\n\r\n\r\n  let token = null;\r\n\r\n  useEffect(() => {\r\n    //Get all users - for the searchbar user search\r\n    getAllUsers();\r\n    \r\n    // Check for token in local storage once the component mounts - i.e. code is now run in the browser (instead of on the server)\r\n    token = localStorage.getItem('token');\r\n    if (token) {\r\n      setAuthState({...authState, authenticated: true, token: token});\r\n      \r\n      // Get the logged in user's data\r\n      getUserDataByToken(token)\r\n\r\n    }\r\n  }, [])\r\n\r\n  const emptyUser = {\r\n    id: '',\r\n    firstName: '',\r\n    lastName: '',\r\n    jobTitle: '',\r\n    location: '',\r\n    languages: [],\r\n    about: '',\r\n    ownedVideos: [],\r\n    userComments: [],\r\n    playlistComments: [],\r\n    favourites: [],\r\n    profilePhotoFilename: ''\r\n  }\r\n\r\n\r\n  // State\r\n  const [authState, setAuthState] = useState({\r\n    authenticated: false,\r\n    userId: null,\r\n    token: null,\r\n    tokenExpiration: null\r\n  });\r\n\r\n  // Logged in User's Data\r\n  const [currentUser, setCurrentUser] = useState(emptyUser);\r\n\r\n  // Current profiles user data\r\n  const [profileUser, setProfileUser] = useState(emptyUser);\r\n\r\n  // const [profilePhoto, setProfilePhoto] = useState(null);\r\n  \r\n  const [videoState, setVideoState] = useState({\r\n    title: '',\r\n    // description:'',\r\n    videoId: ''\r\n  });\r\n\r\n  const [commentState, setCommentState] = useState({\r\n    comment: null\r\n  });\r\n\r\n  const [allUsers, setAllUsers] = useState([]);\r\n\r\n  const [ autoplay, setAutoplay ] = useState(false);\r\n\r\n\r\n\r\n  // AUTHENTICATION *******************************************************************\r\n  \r\n  // Login a user\r\n  const login = async (email, password) => {\r\n\r\n    // Make a API query to get a token\r\n    const requestBody = {\r\n      query: `\r\n        query {\r\n          login(email: \"${email}\", password: \"${password}\") {\r\n            userId,\r\n            token\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch(`${URI}/graphql`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Login failed!');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        return { error: data.errors };\r\n      }\r\n\r\n      // Set state with returned auth data\r\n      const { userId, token } = data.data.login;\r\n\r\n      setAuthState({ ...authState, authenticated: true, userId, token });\r\n\r\n      // Save token to local storage\r\n      localStorage.setItem('token', token)\r\n\r\n      // // Set token as a cookie\r\n      // cookie.save(\r\n      //   'userId',\r\n      //   userId,\r\n      //   {\r\n      //     path: '/',\r\n      //     // expires,\r\n      //     maxAge: 1000,\r\n      //     domain: 'http://localhost:3000',\r\n      //     secure: false,\r\n      //     httpOnly: false\r\n      //   }\r\n      // )\r\n\r\n      // Fetch the user data and set currentUser state\r\n      await getUserDataByToken(token);\r\n\r\n      // Redirect to user's profile page\r\n      Router.push(`/profile/${userId}`);\r\n\r\n      // Return item object indicating no errors\r\n      return {};\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n\r\n  // Register a user\r\n  const register = async (firstName, lastName, email, password) => {\r\n\r\n    // Make a API query to get a token\r\n    const requestBody = {\r\n      query: `\r\n      mutation {\r\n        createUser(userInput: {firstName: \"${firstName}\", lastName: \"${lastName}\", email: \"${email}\", password: \"${password}\"}) {\r\n          email\r\n        }\r\n      }\r\n    `\r\n    }\r\n\r\n    try {\r\n      // const res = await fetch(`http://localhost:${port}/graphql`, {\r\n      const res = await fetch(`${URI}/graphql`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Account creation failed!');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        return {newUserEmail: '', error: data.errors}\r\n      }\r\n\r\n      const newUserEmail = (data.data.createUser.email);\r\n      return { newUserEmail: newUserEmail, error: []};\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n\r\n  }\r\n\r\n  // Logout a user\r\n  const logout = () => {\r\n    // Redirect to home page\r\n    Router.push('/');\r\n    // Clear the authState\r\n    setAuthState({\r\n      authData: null\r\n    })\r\n    // Remove token from localStorage\r\n    localStorage.removeItem('token');\r\n    // Clear the current user\r\n    setCurrentUser(emptyUser);\r\n\r\n    setProfileUser(emptyUser);\r\n    \r\n    // Redirect to home page\r\n    // Router.push('/');\r\n    // console.log('currentUser', currentUser);\r\n    // console.log('profileUser', profileUser);\r\n  }\r\n\r\n  // USER *****************************************************************************\r\n  const updateUser = async (firstName, lastName, jobTitle, location, languages, about) => {\r\n\r\n    // Make a API query to get a token\r\n    const requestBody = {\r\n      query: `\r\n      mutation {\r\n        updateUser(profileInput: {firstName: \"${firstName}\", lastName: \"${lastName}\", jobTitle: \"${jobTitle}\", location: \"${location}\", \r\n        languages: [\r\n          \"${languages[0]}\",\r\n          \"${languages[1]}\", \r\n          \"${languages[2]}\", \r\n          \"${languages[3]}\"\r\n        ],\r\n        about: \"${about}\"}) {\r\n          firstName,\r\n          lastName,\r\n          jobTitle,\r\n          location,\r\n          languages,\r\n          about\r\n        }\r\n      }\r\n    `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch(`http://localhost:${port}/graphql`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('User update failed!');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      // Refresh the profile with the new user data - to update the profileInfo section\r\n      fetchProfileUser(profileUser.id, false)\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n\r\n  \r\n\r\n  \r\n  // DATA FETCHING *******************************************************************\r\n\r\n  const getAllUsers = async () => {\r\n\r\n    const requestBody = {\r\n      query: `\r\n        query {\r\n          users {\r\n            _id,\r\n            firstName,\r\n            lastName\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch(`http://localhost:${port}/graphql`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Failed to fetch user data');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      const users = (data.data.users);\r\n\r\n      // Get full name for use in searchbar\r\n      const usersWithFullName = users.map(user => {\r\n        return {\r\n          id: user._id,\r\n          name: user.firstName + ' ' + user.lastName\r\n        }\r\n      })\r\n\r\n      setAllUsers(usersWithFullName);\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n\r\n  }\r\n  \r\n  \r\n  const getUserDataById = async (userId, requestBody={}) => {\r\n    // console.log('getUserData called with id:', userId)\r\n\r\n    if (requestBody = {}){\r\n      requestBody = {\r\n        query: `\r\n          query {\r\n            userById(id:\"${userId}\") {\r\n              firstName,\r\n              lastName,\r\n              jobTitle,\r\n              location,\r\n              _id,\r\n              languages,\r\n              about,\r\n              ownedVideos {\r\n                _id,\r\n                thumbnailURL,\r\n                title,\r\n                videoURL\r\n              },\r\n              playlistComments{\r\n                _id,\r\n                content,\r\n                commenter {\r\n                  _id\r\n                },\r\n                createdAt,\r\n                updatedAt\r\n              },\r\n              favourites,\r\n              profilePhotoFilename\r\n            }\r\n          }\r\n          `\r\n        }\r\n    }\r\n\r\n\r\n    // console.log(requestBody)\r\n    // console.log(authState.token)\r\n\r\n    try {\r\n      const res = await fetch(`http://localhost:${port}/graphql`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Failed to fetch user data');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      const user = (data.data.userById);\r\n      return user;\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n\r\n  }\r\n  \r\n  \r\n  // Get logged in user's data and sets it in the userState\r\n  const getUserDataByToken = async (token) => {\r\n\r\n    // console.log('called')\r\n\r\n    let requestBody;\r\n\r\n    // If no userId then query the current logged in user by token\r\n    requestBody = {\r\n      query: `\r\n        query {\r\n          userByToken{\r\n            firstName,\r\n            lastName,\r\n            jobTitle,\r\n            location,\r\n            _id,\r\n            languages,\r\n            about,\r\n            ownedVideos {\r\n              _id,\r\n              title,\r\n              thumbnailURL,\r\n              videoURL\r\n            },\r\n            playlistComments{\r\n              _id,\r\n              content,\r\n              commenter {\r\n              _id \r\n              },  \r\n              createdAt,\r\n              updatedAt\r\n            },\r\n            favourites,\r\n            profilePhotoFilename\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch(`http://localhost:${port}/graphql`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Failed to fetch user data');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      const user = data.data.userByToken;\r\n      // console.log(user.firstName)\r\n      // console.log(user);\r\n      \r\n      setCurrentUser({\r\n        id: user._id,\r\n        firstName: user.firstName,\r\n        lastName: user.lastName,\r\n        jobTitle: user.jobTitle,\r\n        location: user.location,\r\n        languages: user.languages,\r\n        about: user.about,\r\n        ownedVideos: user.ownedVideos,\r\n        userComments: user.userComments,\r\n        playlistComments: user.playlistComments,\r\n        favourites: user.favourites,\r\n        profilePhotoFilename: user.profilePhotoFilename\r\n      })  \r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    \r\n  }\r\n\r\n  const fetchProfileUser = async (userId, initialFetch) => {\r\n\r\n    if (initialFetch === true) {\r\n      // Only fetch data if profileUser isn't populated\r\n      if (profileUser.firstName !== '') {\r\n        return\r\n      }\r\n      // Only fetch data if the userId has been parsed from the URL\r\n      if (userId === undefined) {\r\n        return\r\n      }\r\n    }\r\n    // Get the profile user's data using the userId from the URL\r\n    const user = await getUserDataById(userId);\r\n\r\n    // Set the state\r\n    setProfileUser({\r\n      id: userId,\r\n      firstName: user.firstName,\r\n      lastName: user.lastName,\r\n      jobTitle: user.jobTitle,\r\n      location: user.location,\r\n      languages: user.languages,\r\n      about: user.about,\r\n      ownedVideos: user.ownedVideos,\r\n      userComments: user.userComments,\r\n      playlistComments: user.playlistComments,\r\n      favourites: user.favourites,\r\n      profilePhotoFilename: user.profilePhotoFilename\r\n\r\n    })\r\n\r\n    //Set video state to be first video in profile user's playlist\r\n    if (user.ownedVideos.length > 0){\r\n      const video = user.ownedVideos[0]\r\n      setCurrentVideo({\r\n        title: video.title,\r\n        videoId: video.videoURL\r\n      })\r\n    }\r\n\r\n    // Fetch the user's profile photo\r\n    // getProfilePhoto(user.profilePhotoFilename);\r\n\r\n    return user;\r\n  }\r\n\r\n  // Reset the ProfileUser state\r\n  const clearProfileUser = () => {\r\n    setProfileUser({\r\n      id: '',\r\n      firstName: '',\r\n      lastName: '',\r\n      jobTitle: '',\r\n      location: '',\r\n      languages: [],\r\n      about: '',\r\n      ownedVideos: [],\r\n      userComments: [],\r\n      playlistComments: [],\r\n      favourites: [],\r\n      profilePhotoFilename: ''\r\n    });\r\n  }\r\n\r\n  const getCommentUser = async (userId) => {\r\n    let requestBody = {\r\n      query: `\r\n          query {\r\n            userById(id:\"${userId}\") {\r\n              firstName,\r\n              lastName,\r\n              profilePhotoFilename\r\n            }\r\n          }\r\n          `\r\n    }\r\n    const commentUser = await getUserDataById(userId, requestBody);\r\n    return commentUser;\r\n  }\r\n\r\n  const getFavouriteUser = async (userId) => {\r\n    let requestBody = {\r\n      query: `\r\n          query {\r\n            userById(id:\"${userId}\") {\r\n              firstName,\r\n              lastName,\r\n              profilePhotoFilename\r\n            }\r\n          }\r\n          `\r\n    }\r\n    const favouriteUser = await getUserDataById(userId, requestBody)\r\n    return favouriteUser;\r\n  }\r\n\r\n  \r\n  // const getProfilePhoto = async (filename) => {\r\n  //   try {\r\n  //     const res = await axios.get(`http://localhost:5000/file/${filename}`);\r\n\r\n  //     const photo = res.data;\r\n\r\n  //     setProfilePhoto(photo);\r\n\r\n\r\n  //   } catch (error) {\r\n  //     console.log(error);\r\n  //   }\r\n  // }\r\n\r\n\r\n\r\n\r\n\r\n  // VIDEOS **************************************************************************\r\n\r\n\r\n  // Add a video to a user's playlist\r\n  const addVideoToPlaylist = async (video) => {\r\n\r\n    // Send an API request to save the video\r\n    const requestBody = {\r\n      query: `\r\n        mutation {\r\n          createVideo(videoInput: {title: \"${video.title}\", thumbnailURL: \"${video.thumbnailURL}\", videoURL: \"${video.videoId}\", userId: \"${currentUser.id}\"}) {\r\n            _id\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    // console.log(requestBody)\r\n    // console.log(authState.token)\r\n\r\n    try {\r\n      const res = await fetch(`http://localhost:${port}/graphql`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Failed to create video!');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      // Refresh the profile with the new user data - to update the playlist\r\n      fetchProfileUser(currentUser.id, false)\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n\r\n  // Remove a video from a user's playlist\r\n  const removeVideoFromPlaylist = async (id) => {\r\n\r\n  // Send an API request to save the video\r\n    const requestBody = {\r\n      query: `\r\n        mutation {\r\n          removeVideo(id: \"${id}\") {\r\n            ownedVideos {\r\n              _id,\r\n              thumbnailURL,\r\n              title,\r\n              videoURL\r\n            }\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch(`http://localhost:${port}/graphql`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Failed to remove video!');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      console.log(data.data.removeVideo)\r\n\r\n      const videos = data.data.removeVideo.ownedVideos;\r\n      console.log(videos);\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      // Refresh the profile with the new user data - to update the playlist\r\n      updateProfileUserVideos(videos)\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  const updateProfileUserVideos = (videos) => {\r\n    // Update the profile user's ownedVideo in th global state\r\n    setProfileUser({...profileUser, ownedVideos: videos}) \r\n  }\r\n\r\n  // Set a video as the current video for the video player\r\n  const setCurrentVideo = (video) => {\r\n    setVideoState({\r\n      title: video.title,\r\n      // description: video.description,\r\n      videoId: video.videoId\r\n    })\r\n  }\r\n\r\n\r\n  \r\n  \r\n  // COMMENTS ***********************************************************************\r\n\r\n  // Add a comment\r\n  const addComment = async (content) => {\r\n\r\n    // Send an API request to save the comment\r\n    const requestBody = {\r\n      query: `\r\n        mutation {\r\n          createComment(commentInput: {content: \"${content}\", commenterId: \"${currentUser.id}\", playlistOwnerId: \"${profileUser.id}\"}) {\r\n            _id\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch(`http://localhost:${port}/graphql`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Failed to create comment!');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      // Refresh the profile with the new user data - to update the comment section\r\n      fetchProfileUser(profileUser.id, false)\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  \r\n  // Remove a comment from a user's playlist\r\n  const removeCommentFromPlaylist = async (id) => {\r\n\r\n    // Send an API request to delete the comment\r\n    const requestBody = {\r\n      query: `\r\n        mutation {\r\n          removeComment(id: \"${id}\", playlistOwnerId: \"${profileUser.id}\") {\r\n            playlistComments{\r\n              _id,\r\n              content,\r\n              commenter {\r\n                _id\r\n              },\r\n              createdAt,\r\n              updatedAt\r\n            }\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch(`http://localhost:${port}/graphql`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Failed to remove comment!');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      const comments = data.data.removeComment.playlistComments;\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      // Refresh the profile with the new user data - to update the comments\r\n      updateProfileUserComments(comments);\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  const updateProfileUserComments = (comments) => {\r\n    // Update the profile user's playlistComments in the global state\r\n    setProfileUser({ ...profileUser, playlistComments: comments })\r\n  }\r\n\r\n  const editComment = async (id, content) => {\r\n\r\n    // Make a API query to get a token\r\n    const requestBody = {\r\n      query: `\r\n      mutation {\r\n        editComment(id: \"${id}\", content: \"${content}\") {\r\n          content\r\n        }\r\n      }\r\n    `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch(`http://localhost:${port}/graphql`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('User update failed!');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      console.log(data.data)\r\n\r\n      // Refresh the profile with the new user data - to update the comments\r\n      fetchProfileUser(profileUser.id, false)\r\n\r\n\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n\r\n  // Favourites *******************************************************************\r\n  const addFavourite = async (id) => {\r\n\r\n    // Send an API request to add the favourite\r\n    const requestBody = {\r\n      query: `\r\n        mutation {\r\n          addFavourite(id: \"${id}\") {\r\n            _id\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch(`http://localhost:${port}/graphql`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Failed to add favourite!');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      \r\n      // Refresh the currentUser's data to update the add favourite profile button\r\n      // getUserDataById(currentUser.id)\r\n      // Refresh the profile with the new user data - to update the favourites section\r\n      // fetchProfileUser(id, false)\r\n      getUserDataByToken(authState.token);\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n\r\n  // Remove a favourite from a users profile\r\n  const removeFavourite = async (id) => {\r\n\r\n    // Send an API request to delete the comment\r\n    const requestBody = {\r\n      query: `\r\n        mutation {\r\n          removeFavourite(id: \"${id}\") {\r\n            favourites\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    try {\r\n      const res = await fetch(`http://localhost:${port}/graphql`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(requestBody),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      })\r\n\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        throw new Error('Failed to remove favourite!');\r\n      }\r\n\r\n      // .json() is a method from fetch API that auto extracts & parses the res body\r\n      const data = await res.json();\r\n\r\n      // console.log(data)\r\n\r\n      const favourites = data.data.removeFavourite.favourites;\r\n      // console.log(favourites)\r\n\r\n      // Refresh the profile with the new user data - to update the favourites section\r\n      // fetchProfileUser(id, false)\r\n\r\n      // Refresh the currentUser's data to update the add favourite profile button\r\n      // getUserDataById(currentUser.id)\r\n\r\n      getUserDataByToken(authState.token);\r\n\r\n\r\n      // Check for errors array in response\r\n      if (data.errors) {\r\n        data.errors.map(error => {\r\n          console.log(error.message)\r\n        })\r\n        return\r\n      }\r\n\r\n      // Refresh the profile with the new user data - to update the favourites\r\n      updateProfileUserFavourites(favourites);\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  const updateProfileUserFavourites = (favourites) => {\r\n    // Update the profile user's favourites in th global state\r\n    setProfileUser({ ...profileUser, favourites })\r\n  }\r\n\r\n\r\n  // PHOTO ***********************************************************************\r\n  \r\n  const uploadFile = async (formData) => {\r\n\r\n    try {\r\n      // Make API request to upload the file to the DB\r\n      const res = await axios.post(`http://localhost:${port}/upload`, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n          'Authorization': `Bearer ${authState.token}`\r\n        }\r\n      });\r\n\r\n      // refresh the profile\r\n      fetchProfileUser(currentUser.id)\r\n\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n\r\n  }\r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n  return (\r\n    <ContextProvider value={{\r\n      authState,\r\n      currentUser,\r\n      profileUser,\r\n      setProfileUser,\r\n      videoState,\r\n      commentState,\r\n      allUsers,\r\n      autoplay,\r\n      setAutoplay,\r\n      // profilePhoto,\r\n      login,\r\n      register,\r\n      logout,\r\n      updateUser,\r\n      getUserDataById,\r\n      getUserDataByToken,\r\n      fetchProfileUser,\r\n      getCommentUser,\r\n      getFavouriteUser,\r\n      addVideoToPlaylist,\r\n      clearProfileUser,\r\n      removeVideoFromPlaylist,\r\n      setCurrentVideo,\r\n      addComment,\r\n      editComment,\r\n      removeCommentFromPlaylist,\r\n      addFavourite,\r\n      removeFavourite,\r\n      uploadFile\r\n    }}>\r\n      <Layout>\r\n        <AnimatePresence exitBeforeEnter>\r\n          <Component {...pageProps} />\r\n        </AnimatePresence>\r\n      </Layout>\r\n    </ContextProvider>\r\n  )\r\n}\r\n\r\n\r\n// App.getInitialProps = async context => {\r\n\r\n//   const res = await fetch('path/to/endpoint', {\r\n//     headers: {\r\n//       cookie: ctx.req.headers.cookie,\r\n//     },\r\n//   });\r\n//   const user = await res.json();\r\n\r\n//   return { user };\r\n  \r\n  // const token = cookie.load('token');\r\n  // console.log('token from cookie', token);\r\n  \r\n  // // if (token) {\r\n  // //   setAuthState({ ...authState, authenticated: true, token: token}); \r\n  // // }\r\n  // return {token : token};\r\n// }\r\n\r\n\r\n\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}